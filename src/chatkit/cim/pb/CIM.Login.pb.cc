// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CIM.Login.proto

#include "CIM.Login.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace CIM {
namespace Login {
PROTOBUF_CONSTEXPR CIMAuthTokenReq::CIMAuthTokenReq(
    ::_pbi::ConstantInitialized)
  : nick_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , user_token_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , client_version_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , user_id_(uint64_t{0u})
  , client_type_(0)
{}
struct CIMAuthTokenReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CIMAuthTokenReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CIMAuthTokenReqDefaultTypeInternal() {}
  union {
    CIMAuthTokenReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CIMAuthTokenReqDefaultTypeInternal _CIMAuthTokenReq_default_instance_;
PROTOBUF_CONSTEXPR CIMAuthTokenRsp::CIMAuthTokenRsp(
    ::_pbi::ConstantInitialized)
  : result_string_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , user_info_(nullptr)
  , server_time_(0u)
  , result_code_(0)
{}
struct CIMAuthTokenRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CIMAuthTokenRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CIMAuthTokenRspDefaultTypeInternal() {}
  union {
    CIMAuthTokenRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CIMAuthTokenRspDefaultTypeInternal _CIMAuthTokenRsp_default_instance_;
PROTOBUF_CONSTEXPR CIMAuthReq::CIMAuthReq(
    ::_pbi::ConstantInitialized)
  : user_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , user_pwd_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , client_version_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , client_type_(0)
{}
struct CIMAuthReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CIMAuthReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CIMAuthReqDefaultTypeInternal() {}
  union {
    CIMAuthReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CIMAuthReqDefaultTypeInternal _CIMAuthReq_default_instance_;
PROTOBUF_CONSTEXPR CIMAuthRsp::CIMAuthRsp(
    ::_pbi::ConstantInitialized)
  : result_string_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , user_info_(nullptr)
  , server_time_(0u)
  , result_code_(0)
{}
struct CIMAuthRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CIMAuthRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CIMAuthRspDefaultTypeInternal() {}
  union {
    CIMAuthRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CIMAuthRspDefaultTypeInternal _CIMAuthRsp_default_instance_;
PROTOBUF_CONSTEXPR CIMLogoutReq::CIMLogoutReq(
    ::_pbi::ConstantInitialized)
  : user_id_(uint64_t{0u})
  , client_type_(0)
{}
struct CIMLogoutReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CIMLogoutReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CIMLogoutReqDefaultTypeInternal() {}
  union {
    CIMLogoutReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CIMLogoutReqDefaultTypeInternal _CIMLogoutReq_default_instance_;
PROTOBUF_CONSTEXPR CIMLogoutRsp::CIMLogoutRsp(
    ::_pbi::ConstantInitialized)
  : result_code_(0u){}
struct CIMLogoutRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CIMLogoutRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CIMLogoutRspDefaultTypeInternal() {}
  union {
    CIMLogoutRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CIMLogoutRspDefaultTypeInternal _CIMLogoutRsp_default_instance_;
PROTOBUF_CONSTEXPR CIMHeartBeat::CIMHeartBeat(
    ::_pbi::ConstantInitialized){}
struct CIMHeartBeatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CIMHeartBeatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CIMHeartBeatDefaultTypeInternal() {}
  union {
    CIMHeartBeat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CIMHeartBeatDefaultTypeInternal _CIMHeartBeat_default_instance_;
}  // namespace Login
}  // namespace CIM
namespace CIM {
namespace Login {

// ===================================================================

class CIMAuthTokenReq::_Internal {
 public:
};

CIMAuthTokenReq::CIMAuthTokenReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:CIM.Login.CIMAuthTokenReq)
}
CIMAuthTokenReq::CIMAuthTokenReq(const CIMAuthTokenReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  nick_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    nick_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nick_name().empty()) {
    nick_name_.Set(from._internal_nick_name(), 
      GetArenaForAllocation());
  }
  user_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_token().empty()) {
    user_token_.Set(from._internal_user_token(), 
      GetArenaForAllocation());
  }
  client_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    client_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_version().empty()) {
    client_version_.Set(from._internal_client_version(), 
      GetArenaForAllocation());
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_type_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(client_type_));
  // @@protoc_insertion_point(copy_constructor:CIM.Login.CIMAuthTokenReq)
}

inline void CIMAuthTokenReq::SharedCtor() {
nick_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  nick_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_token_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_token_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
client_version_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  client_version_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&client_type_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(client_type_));
}

CIMAuthTokenReq::~CIMAuthTokenReq() {
  // @@protoc_insertion_point(destructor:CIM.Login.CIMAuthTokenReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CIMAuthTokenReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  nick_name_.Destroy();
  user_token_.Destroy();
  client_version_.Destroy();
}

void CIMAuthTokenReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CIMAuthTokenReq::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.Login.CIMAuthTokenReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nick_name_.ClearToEmpty();
  user_token_.ClearToEmpty();
  client_version_.ClearToEmpty();
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_type_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(client_type_));
  _internal_metadata_.Clear<std::string>();
}

const char* CIMAuthTokenReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string nick_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_nick_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string user_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_user_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // .CIM.Def.CIMClientType client_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_client_type(static_cast<::CIM::Def::CIMClientType>(val));
        } else
          goto handle_unusual;
        continue;
      // string client_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_client_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CIMAuthTokenReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CIM.Login.CIMAuthTokenReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_id(), target);
  }

  // string nick_name = 2;
  if (!this->_internal_nick_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nick_name().data(), static_cast<int>(this->_internal_nick_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CIM.Login.CIMAuthTokenReq.nick_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nick_name(), target);
  }

  // string user_token = 3;
  if (!this->_internal_user_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_token().data(), static_cast<int>(this->_internal_user_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CIM.Login.CIMAuthTokenReq.user_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user_token(), target);
  }

  // .CIM.Def.CIMClientType client_type = 4;
  if (this->_internal_client_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_client_type(), target);
  }

  // string client_version = 5;
  if (!this->_internal_client_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_version().data(), static_cast<int>(this->_internal_client_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CIM.Login.CIMAuthTokenReq.client_version");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_client_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CIM.Login.CIMAuthTokenReq)
  return target;
}

size_t CIMAuthTokenReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.Login.CIMAuthTokenReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nick_name = 2;
  if (!this->_internal_nick_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nick_name());
  }

  // string user_token = 3;
  if (!this->_internal_user_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_token());
  }

  // string client_version = 5;
  if (!this->_internal_client_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_version());
  }

  // uint64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_user_id());
  }

  // .CIM.Def.CIMClientType client_type = 4;
  if (this->_internal_client_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_client_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CIMAuthTokenReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CIMAuthTokenReq*>(
      &from));
}

void CIMAuthTokenReq::MergeFrom(const CIMAuthTokenReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.Login.CIMAuthTokenReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nick_name().empty()) {
    _internal_set_nick_name(from._internal_nick_name());
  }
  if (!from._internal_user_token().empty()) {
    _internal_set_user_token(from._internal_user_token());
  }
  if (!from._internal_client_version().empty()) {
    _internal_set_client_version(from._internal_client_version());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_client_type() != 0) {
    _internal_set_client_type(from._internal_client_type());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CIMAuthTokenReq::CopyFrom(const CIMAuthTokenReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.Login.CIMAuthTokenReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIMAuthTokenReq::IsInitialized() const {
  return true;
}

void CIMAuthTokenReq::InternalSwap(CIMAuthTokenReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &nick_name_, lhs_arena,
      &other->nick_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &user_token_, lhs_arena,
      &other->user_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &client_version_, lhs_arena,
      &other->client_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CIMAuthTokenReq, client_type_)
      + sizeof(CIMAuthTokenReq::client_type_)
      - PROTOBUF_FIELD_OFFSET(CIMAuthTokenReq, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

std::string CIMAuthTokenReq::GetTypeName() const {
  return "CIM.Login.CIMAuthTokenReq";
}


// ===================================================================

class CIMAuthTokenRsp::_Internal {
 public:
  static const ::CIM::Def::CIMUserInfo& user_info(const CIMAuthTokenRsp* msg);
};

const ::CIM::Def::CIMUserInfo&
CIMAuthTokenRsp::_Internal::user_info(const CIMAuthTokenRsp* msg) {
  return *msg->user_info_;
}
void CIMAuthTokenRsp::clear_user_info() {
  if (GetArenaForAllocation() == nullptr && user_info_ != nullptr) {
    delete user_info_;
  }
  user_info_ = nullptr;
}
CIMAuthTokenRsp::CIMAuthTokenRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:CIM.Login.CIMAuthTokenRsp)
}
CIMAuthTokenRsp::CIMAuthTokenRsp(const CIMAuthTokenRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  result_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    result_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_result_string().empty()) {
    result_string_.Set(from._internal_result_string(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_info()) {
    user_info_ = new ::CIM::Def::CIMUserInfo(*from.user_info_);
  } else {
    user_info_ = nullptr;
  }
  ::memcpy(&server_time_, &from.server_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_code_) -
    reinterpret_cast<char*>(&server_time_)) + sizeof(result_code_));
  // @@protoc_insertion_point(copy_constructor:CIM.Login.CIMAuthTokenRsp)
}

inline void CIMAuthTokenRsp::SharedCtor() {
result_string_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  result_string_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_code_) -
    reinterpret_cast<char*>(&user_info_)) + sizeof(result_code_));
}

CIMAuthTokenRsp::~CIMAuthTokenRsp() {
  // @@protoc_insertion_point(destructor:CIM.Login.CIMAuthTokenRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CIMAuthTokenRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  result_string_.Destroy();
  if (this != internal_default_instance()) delete user_info_;
}

void CIMAuthTokenRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CIMAuthTokenRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.Login.CIMAuthTokenRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_string_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_info_ != nullptr) {
    delete user_info_;
  }
  user_info_ = nullptr;
  ::memset(&server_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_code_) -
      reinterpret_cast<char*>(&server_time_)) + sizeof(result_code_));
  _internal_metadata_.Clear<std::string>();
}

const char* CIMAuthTokenRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 server_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          server_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CIM.Def.CIMErrorCode result_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result_code(static_cast<::CIM::Def::CIMErrorCode>(val));
        } else
          goto handle_unusual;
        continue;
      // string result_string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_result_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // .CIM.Def.CIMUserInfo user_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CIMAuthTokenRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CIM.Login.CIMAuthTokenRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 server_time = 1;
  if (this->_internal_server_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_server_time(), target);
  }

  // .CIM.Def.CIMErrorCode result_code = 2;
  if (this->_internal_result_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_result_code(), target);
  }

  // string result_string = 3;
  if (!this->_internal_result_string().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result_string().data(), static_cast<int>(this->_internal_result_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CIM.Login.CIMAuthTokenRsp.result_string");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_result_string(), target);
  }

  // .CIM.Def.CIMUserInfo user_info = 4;
  if (this->_internal_has_user_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::user_info(this),
        _Internal::user_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CIM.Login.CIMAuthTokenRsp)
  return target;
}

size_t CIMAuthTokenRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.Login.CIMAuthTokenRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result_string = 3;
  if (!this->_internal_result_string().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result_string());
  }

  // .CIM.Def.CIMUserInfo user_info = 4;
  if (this->_internal_has_user_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_info_);
  }

  // uint32 server_time = 1;
  if (this->_internal_server_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_server_time());
  }

  // .CIM.Def.CIMErrorCode result_code = 2;
  if (this->_internal_result_code() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CIMAuthTokenRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CIMAuthTokenRsp*>(
      &from));
}

void CIMAuthTokenRsp::MergeFrom(const CIMAuthTokenRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.Login.CIMAuthTokenRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_result_string().empty()) {
    _internal_set_result_string(from._internal_result_string());
  }
  if (from._internal_has_user_info()) {
    _internal_mutable_user_info()->::CIM::Def::CIMUserInfo::MergeFrom(from._internal_user_info());
  }
  if (from._internal_server_time() != 0) {
    _internal_set_server_time(from._internal_server_time());
  }
  if (from._internal_result_code() != 0) {
    _internal_set_result_code(from._internal_result_code());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CIMAuthTokenRsp::CopyFrom(const CIMAuthTokenRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.Login.CIMAuthTokenRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIMAuthTokenRsp::IsInitialized() const {
  return true;
}

void CIMAuthTokenRsp::InternalSwap(CIMAuthTokenRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &result_string_, lhs_arena,
      &other->result_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CIMAuthTokenRsp, result_code_)
      + sizeof(CIMAuthTokenRsp::result_code_)
      - PROTOBUF_FIELD_OFFSET(CIMAuthTokenRsp, user_info_)>(
          reinterpret_cast<char*>(&user_info_),
          reinterpret_cast<char*>(&other->user_info_));
}

std::string CIMAuthTokenRsp::GetTypeName() const {
  return "CIM.Login.CIMAuthTokenRsp";
}


// ===================================================================

class CIMAuthReq::_Internal {
 public:
};

CIMAuthReq::CIMAuthReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:CIM.Login.CIMAuthReq)
}
CIMAuthReq::CIMAuthReq(const CIMAuthReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_name().empty()) {
    user_name_.Set(from._internal_user_name(), 
      GetArenaForAllocation());
  }
  user_pwd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_pwd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_pwd().empty()) {
    user_pwd_.Set(from._internal_user_pwd(), 
      GetArenaForAllocation());
  }
  client_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    client_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_version().empty()) {
    client_version_.Set(from._internal_client_version(), 
      GetArenaForAllocation());
  }
  client_type_ = from.client_type_;
  // @@protoc_insertion_point(copy_constructor:CIM.Login.CIMAuthReq)
}

inline void CIMAuthReq::SharedCtor() {
user_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_pwd_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_pwd_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
client_version_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  client_version_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
client_type_ = 0;
}

CIMAuthReq::~CIMAuthReq() {
  // @@protoc_insertion_point(destructor:CIM.Login.CIMAuthReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CIMAuthReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  user_name_.Destroy();
  user_pwd_.Destroy();
  client_version_.Destroy();
}

void CIMAuthReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CIMAuthReq::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.Login.CIMAuthReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_name_.ClearToEmpty();
  user_pwd_.ClearToEmpty();
  client_version_.ClearToEmpty();
  client_type_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* CIMAuthReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string user_pwd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_user_pwd();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // .CIM.Def.CIMClientType client_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_client_type(static_cast<::CIM::Def::CIMClientType>(val));
        } else
          goto handle_unusual;
        continue;
      // string client_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_client_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CIMAuthReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CIM.Login.CIMAuthReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_name = 1;
  if (!this->_internal_user_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CIM.Login.CIMAuthReq.user_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_name(), target);
  }

  // string user_pwd = 2;
  if (!this->_internal_user_pwd().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_pwd().data(), static_cast<int>(this->_internal_user_pwd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CIM.Login.CIMAuthReq.user_pwd");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_pwd(), target);
  }

  // .CIM.Def.CIMClientType client_type = 3;
  if (this->_internal_client_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_client_type(), target);
  }

  // string client_version = 4;
  if (!this->_internal_client_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_version().data(), static_cast<int>(this->_internal_client_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CIM.Login.CIMAuthReq.client_version");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_client_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CIM.Login.CIMAuthReq)
  return target;
}

size_t CIMAuthReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.Login.CIMAuthReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_name = 1;
  if (!this->_internal_user_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_name());
  }

  // string user_pwd = 2;
  if (!this->_internal_user_pwd().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_pwd());
  }

  // string client_version = 4;
  if (!this->_internal_client_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_version());
  }

  // .CIM.Def.CIMClientType client_type = 3;
  if (this->_internal_client_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_client_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CIMAuthReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CIMAuthReq*>(
      &from));
}

void CIMAuthReq::MergeFrom(const CIMAuthReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.Login.CIMAuthReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_name().empty()) {
    _internal_set_user_name(from._internal_user_name());
  }
  if (!from._internal_user_pwd().empty()) {
    _internal_set_user_pwd(from._internal_user_pwd());
  }
  if (!from._internal_client_version().empty()) {
    _internal_set_client_version(from._internal_client_version());
  }
  if (from._internal_client_type() != 0) {
    _internal_set_client_type(from._internal_client_type());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CIMAuthReq::CopyFrom(const CIMAuthReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.Login.CIMAuthReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIMAuthReq::IsInitialized() const {
  return true;
}

void CIMAuthReq::InternalSwap(CIMAuthReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &user_name_, lhs_arena,
      &other->user_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &user_pwd_, lhs_arena,
      &other->user_pwd_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &client_version_, lhs_arena,
      &other->client_version_, rhs_arena
  );
  swap(client_type_, other->client_type_);
}

std::string CIMAuthReq::GetTypeName() const {
  return "CIM.Login.CIMAuthReq";
}


// ===================================================================

class CIMAuthRsp::_Internal {
 public:
  static const ::CIM::Def::CIMUserInfo& user_info(const CIMAuthRsp* msg);
};

const ::CIM::Def::CIMUserInfo&
CIMAuthRsp::_Internal::user_info(const CIMAuthRsp* msg) {
  return *msg->user_info_;
}
void CIMAuthRsp::clear_user_info() {
  if (GetArenaForAllocation() == nullptr && user_info_ != nullptr) {
    delete user_info_;
  }
  user_info_ = nullptr;
}
CIMAuthRsp::CIMAuthRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:CIM.Login.CIMAuthRsp)
}
CIMAuthRsp::CIMAuthRsp(const CIMAuthRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  result_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    result_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_result_string().empty()) {
    result_string_.Set(from._internal_result_string(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_info()) {
    user_info_ = new ::CIM::Def::CIMUserInfo(*from.user_info_);
  } else {
    user_info_ = nullptr;
  }
  ::memcpy(&server_time_, &from.server_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_code_) -
    reinterpret_cast<char*>(&server_time_)) + sizeof(result_code_));
  // @@protoc_insertion_point(copy_constructor:CIM.Login.CIMAuthRsp)
}

inline void CIMAuthRsp::SharedCtor() {
result_string_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  result_string_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_code_) -
    reinterpret_cast<char*>(&user_info_)) + sizeof(result_code_));
}

CIMAuthRsp::~CIMAuthRsp() {
  // @@protoc_insertion_point(destructor:CIM.Login.CIMAuthRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CIMAuthRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  result_string_.Destroy();
  if (this != internal_default_instance()) delete user_info_;
}

void CIMAuthRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CIMAuthRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.Login.CIMAuthRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_string_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_info_ != nullptr) {
    delete user_info_;
  }
  user_info_ = nullptr;
  ::memset(&server_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_code_) -
      reinterpret_cast<char*>(&server_time_)) + sizeof(result_code_));
  _internal_metadata_.Clear<std::string>();
}

const char* CIMAuthRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 server_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          server_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CIM.Def.CIMErrorCode result_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result_code(static_cast<::CIM::Def::CIMErrorCode>(val));
        } else
          goto handle_unusual;
        continue;
      // string result_string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_result_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // .CIM.Def.CIMUserInfo user_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CIMAuthRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CIM.Login.CIMAuthRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 server_time = 1;
  if (this->_internal_server_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_server_time(), target);
  }

  // .CIM.Def.CIMErrorCode result_code = 2;
  if (this->_internal_result_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_result_code(), target);
  }

  // string result_string = 3;
  if (!this->_internal_result_string().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result_string().data(), static_cast<int>(this->_internal_result_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CIM.Login.CIMAuthRsp.result_string");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_result_string(), target);
  }

  // .CIM.Def.CIMUserInfo user_info = 4;
  if (this->_internal_has_user_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::user_info(this),
        _Internal::user_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CIM.Login.CIMAuthRsp)
  return target;
}

size_t CIMAuthRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.Login.CIMAuthRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result_string = 3;
  if (!this->_internal_result_string().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result_string());
  }

  // .CIM.Def.CIMUserInfo user_info = 4;
  if (this->_internal_has_user_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_info_);
  }

  // uint32 server_time = 1;
  if (this->_internal_server_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_server_time());
  }

  // .CIM.Def.CIMErrorCode result_code = 2;
  if (this->_internal_result_code() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CIMAuthRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CIMAuthRsp*>(
      &from));
}

void CIMAuthRsp::MergeFrom(const CIMAuthRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.Login.CIMAuthRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_result_string().empty()) {
    _internal_set_result_string(from._internal_result_string());
  }
  if (from._internal_has_user_info()) {
    _internal_mutable_user_info()->::CIM::Def::CIMUserInfo::MergeFrom(from._internal_user_info());
  }
  if (from._internal_server_time() != 0) {
    _internal_set_server_time(from._internal_server_time());
  }
  if (from._internal_result_code() != 0) {
    _internal_set_result_code(from._internal_result_code());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CIMAuthRsp::CopyFrom(const CIMAuthRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.Login.CIMAuthRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIMAuthRsp::IsInitialized() const {
  return true;
}

void CIMAuthRsp::InternalSwap(CIMAuthRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &result_string_, lhs_arena,
      &other->result_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CIMAuthRsp, result_code_)
      + sizeof(CIMAuthRsp::result_code_)
      - PROTOBUF_FIELD_OFFSET(CIMAuthRsp, user_info_)>(
          reinterpret_cast<char*>(&user_info_),
          reinterpret_cast<char*>(&other->user_info_));
}

std::string CIMAuthRsp::GetTypeName() const {
  return "CIM.Login.CIMAuthRsp";
}


// ===================================================================

class CIMLogoutReq::_Internal {
 public:
};

CIMLogoutReq::CIMLogoutReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:CIM.Login.CIMLogoutReq)
}
CIMLogoutReq::CIMLogoutReq(const CIMLogoutReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_type_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(client_type_));
  // @@protoc_insertion_point(copy_constructor:CIM.Login.CIMLogoutReq)
}

inline void CIMLogoutReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&client_type_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(client_type_));
}

CIMLogoutReq::~CIMLogoutReq() {
  // @@protoc_insertion_point(destructor:CIM.Login.CIMLogoutReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CIMLogoutReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CIMLogoutReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CIMLogoutReq::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.Login.CIMLogoutReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_type_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(client_type_));
  _internal_metadata_.Clear<std::string>();
}

const char* CIMLogoutReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CIM.Def.CIMClientType client_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_client_type(static_cast<::CIM::Def::CIMClientType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CIMLogoutReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CIM.Login.CIMLogoutReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_id(), target);
  }

  // .CIM.Def.CIMClientType client_type = 2;
  if (this->_internal_client_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_client_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CIM.Login.CIMLogoutReq)
  return target;
}

size_t CIMLogoutReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.Login.CIMLogoutReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_user_id());
  }

  // .CIM.Def.CIMClientType client_type = 2;
  if (this->_internal_client_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_client_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CIMLogoutReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CIMLogoutReq*>(
      &from));
}

void CIMLogoutReq::MergeFrom(const CIMLogoutReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.Login.CIMLogoutReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_client_type() != 0) {
    _internal_set_client_type(from._internal_client_type());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CIMLogoutReq::CopyFrom(const CIMLogoutReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.Login.CIMLogoutReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIMLogoutReq::IsInitialized() const {
  return true;
}

void CIMLogoutReq::InternalSwap(CIMLogoutReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CIMLogoutReq, client_type_)
      + sizeof(CIMLogoutReq::client_type_)
      - PROTOBUF_FIELD_OFFSET(CIMLogoutReq, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

std::string CIMLogoutReq::GetTypeName() const {
  return "CIM.Login.CIMLogoutReq";
}


// ===================================================================

class CIMLogoutRsp::_Internal {
 public:
};

CIMLogoutRsp::CIMLogoutRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:CIM.Login.CIMLogoutRsp)
}
CIMLogoutRsp::CIMLogoutRsp(const CIMLogoutRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  result_code_ = from.result_code_;
  // @@protoc_insertion_point(copy_constructor:CIM.Login.CIMLogoutRsp)
}

inline void CIMLogoutRsp::SharedCtor() {
result_code_ = 0u;
}

CIMLogoutRsp::~CIMLogoutRsp() {
  // @@protoc_insertion_point(destructor:CIM.Login.CIMLogoutRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CIMLogoutRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CIMLogoutRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CIMLogoutRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.Login.CIMLogoutRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_code_ = 0u;
  _internal_metadata_.Clear<std::string>();
}

const char* CIMLogoutRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 result_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          result_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CIMLogoutRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CIM.Login.CIMLogoutRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result_code = 1;
  if (this->_internal_result_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CIM.Login.CIMLogoutRsp)
  return target;
}

size_t CIMLogoutRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.Login.CIMLogoutRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 result_code = 1;
  if (this->_internal_result_code() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CIMLogoutRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CIMLogoutRsp*>(
      &from));
}

void CIMLogoutRsp::MergeFrom(const CIMLogoutRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.Login.CIMLogoutRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result_code() != 0) {
    _internal_set_result_code(from._internal_result_code());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CIMLogoutRsp::CopyFrom(const CIMLogoutRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.Login.CIMLogoutRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIMLogoutRsp::IsInitialized() const {
  return true;
}

void CIMLogoutRsp::InternalSwap(CIMLogoutRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(result_code_, other->result_code_);
}

std::string CIMLogoutRsp::GetTypeName() const {
  return "CIM.Login.CIMLogoutRsp";
}


// ===================================================================

class CIMHeartBeat::_Internal {
 public:
};

CIMHeartBeat::CIMHeartBeat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:CIM.Login.CIMHeartBeat)
}
CIMHeartBeat::CIMHeartBeat(const CIMHeartBeat& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CIM.Login.CIMHeartBeat)
}

inline void CIMHeartBeat::SharedCtor() {
}

CIMHeartBeat::~CIMHeartBeat() {
  // @@protoc_insertion_point(destructor:CIM.Login.CIMHeartBeat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CIMHeartBeat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CIMHeartBeat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CIMHeartBeat::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.Login.CIMHeartBeat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* CIMHeartBeat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CIMHeartBeat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CIM.Login.CIMHeartBeat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CIM.Login.CIMHeartBeat)
  return target;
}

size_t CIMHeartBeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.Login.CIMHeartBeat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CIMHeartBeat::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CIMHeartBeat*>(
      &from));
}

void CIMHeartBeat::MergeFrom(const CIMHeartBeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.Login.CIMHeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CIMHeartBeat::CopyFrom(const CIMHeartBeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.Login.CIMHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIMHeartBeat::IsInitialized() const {
  return true;
}

void CIMHeartBeat::InternalSwap(CIMHeartBeat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string CIMHeartBeat::GetTypeName() const {
  return "CIM.Login.CIMHeartBeat";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Login
}  // namespace CIM
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CIM::Login::CIMAuthTokenReq*
Arena::CreateMaybeMessage< ::CIM::Login::CIMAuthTokenReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CIM::Login::CIMAuthTokenReq >(arena);
}
template<> PROTOBUF_NOINLINE ::CIM::Login::CIMAuthTokenRsp*
Arena::CreateMaybeMessage< ::CIM::Login::CIMAuthTokenRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CIM::Login::CIMAuthTokenRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::CIM::Login::CIMAuthReq*
Arena::CreateMaybeMessage< ::CIM::Login::CIMAuthReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CIM::Login::CIMAuthReq >(arena);
}
template<> PROTOBUF_NOINLINE ::CIM::Login::CIMAuthRsp*
Arena::CreateMaybeMessage< ::CIM::Login::CIMAuthRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CIM::Login::CIMAuthRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::CIM::Login::CIMLogoutReq*
Arena::CreateMaybeMessage< ::CIM::Login::CIMLogoutReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CIM::Login::CIMLogoutReq >(arena);
}
template<> PROTOBUF_NOINLINE ::CIM::Login::CIMLogoutRsp*
Arena::CreateMaybeMessage< ::CIM::Login::CIMLogoutRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CIM::Login::CIMLogoutRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::CIM::Login::CIMHeartBeat*
Arena::CreateMaybeMessage< ::CIM::Login::CIMHeartBeat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CIM::Login::CIMHeartBeat >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
