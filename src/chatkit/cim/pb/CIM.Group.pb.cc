// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CIM.Group.proto

#include "CIM.Group.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace CIM {
namespace Group {
constexpr CIMGroupCreateReq::CIMGroupCreateReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : member_id_list_()
  , _member_id_list_cached_byte_size_(0)
  , group_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(uint64_t{0u}){}
struct CIMGroupCreateReqDefaultTypeInternal {
  constexpr CIMGroupCreateReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CIMGroupCreateReqDefaultTypeInternal() {}
  union {
    CIMGroupCreateReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CIMGroupCreateReqDefaultTypeInternal _CIMGroupCreateReq_default_instance_;
constexpr CIMGroupCreateRsp::CIMGroupCreateRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : member_id_list_()
  , _member_id_list_cached_byte_size_(0)
  , attach_notificatino_msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , group_info_(nullptr)
  , user_id_(uint64_t{0u})
  , result_code_(0u){}
struct CIMGroupCreateRspDefaultTypeInternal {
  constexpr CIMGroupCreateRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CIMGroupCreateRspDefaultTypeInternal() {}
  union {
    CIMGroupCreateRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CIMGroupCreateRspDefaultTypeInternal _CIMGroupCreateRsp_default_instance_;
constexpr CIMGroupDisbandingReq::CIMGroupDisbandingReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_id_(uint64_t{0u})
  , group_id_(uint64_t{0u}){}
struct CIMGroupDisbandingReqDefaultTypeInternal {
  constexpr CIMGroupDisbandingReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CIMGroupDisbandingReqDefaultTypeInternal() {}
  union {
    CIMGroupDisbandingReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CIMGroupDisbandingReqDefaultTypeInternal _CIMGroupDisbandingReq_default_instance_;
constexpr CIMGroupDisbandingRsp::CIMGroupDisbandingRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attach_notificatino_msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(uint64_t{0u})
  , group_id_(uint64_t{0u})
  , result_code_(0u){}
struct CIMGroupDisbandingRspDefaultTypeInternal {
  constexpr CIMGroupDisbandingRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CIMGroupDisbandingRspDefaultTypeInternal() {}
  union {
    CIMGroupDisbandingRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CIMGroupDisbandingRspDefaultTypeInternal _CIMGroupDisbandingRsp_default_instance_;
constexpr CIMGroupExitReq::CIMGroupExitReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_id_(uint64_t{0u})
  , group_id_(uint64_t{0u}){}
struct CIMGroupExitReqDefaultTypeInternal {
  constexpr CIMGroupExitReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CIMGroupExitReqDefaultTypeInternal() {}
  union {
    CIMGroupExitReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CIMGroupExitReqDefaultTypeInternal _CIMGroupExitReq_default_instance_;
constexpr CIMGroupExitRsp::CIMGroupExitRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attach_notificatino_msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(uint64_t{0u})
  , group_id_(uint64_t{0u})
  , result_code_(0u){}
struct CIMGroupExitRspDefaultTypeInternal {
  constexpr CIMGroupExitRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CIMGroupExitRspDefaultTypeInternal() {}
  union {
    CIMGroupExitRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CIMGroupExitRspDefaultTypeInternal _CIMGroupExitRsp_default_instance_;
constexpr CIMGroupListReq::CIMGroupListReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_id_(uint64_t{0u}){}
struct CIMGroupListReqDefaultTypeInternal {
  constexpr CIMGroupListReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CIMGroupListReqDefaultTypeInternal() {}
  union {
    CIMGroupListReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CIMGroupListReqDefaultTypeInternal _CIMGroupListReq_default_instance_;
constexpr CIMGroupListRsp::CIMGroupListRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : group_version_list_()
  , user_id_(uint64_t{0u}){}
struct CIMGroupListRspDefaultTypeInternal {
  constexpr CIMGroupListRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CIMGroupListRspDefaultTypeInternal() {}
  union {
    CIMGroupListRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CIMGroupListRspDefaultTypeInternal _CIMGroupListRsp_default_instance_;
constexpr CIMGroupInfoReq::CIMGroupInfoReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : group_version_list_()
  , user_id_(uint64_t{0u}){}
struct CIMGroupInfoReqDefaultTypeInternal {
  constexpr CIMGroupInfoReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CIMGroupInfoReqDefaultTypeInternal() {}
  union {
    CIMGroupInfoReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CIMGroupInfoReqDefaultTypeInternal _CIMGroupInfoReq_default_instance_;
constexpr CIMGroupInfoRsp::CIMGroupInfoRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : group_info_list_()
  , user_id_(uint64_t{0u})
  , result_code_(0u){}
struct CIMGroupInfoRspDefaultTypeInternal {
  constexpr CIMGroupInfoRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CIMGroupInfoRspDefaultTypeInternal() {}
  union {
    CIMGroupInfoRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CIMGroupInfoRspDefaultTypeInternal _CIMGroupInfoRsp_default_instance_;
constexpr CIMGroupInviteMemberReq::CIMGroupInviteMemberReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : member_id_list_()
  , _member_id_list_cached_byte_size_(0)
  , user_id_(uint64_t{0u})
  , group_id_(uint64_t{0u}){}
struct CIMGroupInviteMemberReqDefaultTypeInternal {
  constexpr CIMGroupInviteMemberReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CIMGroupInviteMemberReqDefaultTypeInternal() {}
  union {
    CIMGroupInviteMemberReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CIMGroupInviteMemberReqDefaultTypeInternal _CIMGroupInviteMemberReq_default_instance_;
constexpr CIMGroupInviteMemberRsp::CIMGroupInviteMemberRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attach_notificatino_msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(uint64_t{0u})
  , group_id_(uint64_t{0u})
  , result_code_(0u){}
struct CIMGroupInviteMemberRspDefaultTypeInternal {
  constexpr CIMGroupInviteMemberRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CIMGroupInviteMemberRspDefaultTypeInternal() {}
  union {
    CIMGroupInviteMemberRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CIMGroupInviteMemberRspDefaultTypeInternal _CIMGroupInviteMemberRsp_default_instance_;
constexpr CIMGroupKickOutMemberReq::CIMGroupKickOutMemberReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : member_id_list_()
  , _member_id_list_cached_byte_size_(0)
  , user_id_(uint64_t{0u})
  , group_id_(uint64_t{0u}){}
struct CIMGroupKickOutMemberReqDefaultTypeInternal {
  constexpr CIMGroupKickOutMemberReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CIMGroupKickOutMemberReqDefaultTypeInternal() {}
  union {
    CIMGroupKickOutMemberReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CIMGroupKickOutMemberReqDefaultTypeInternal _CIMGroupKickOutMemberReq_default_instance_;
constexpr CIMGroupKickOutMemberRsp::CIMGroupKickOutMemberRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attach_notificatino_msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(uint64_t{0u})
  , group_id_(uint64_t{0u})
  , result_code_(0u){}
struct CIMGroupKickOutMemberRspDefaultTypeInternal {
  constexpr CIMGroupKickOutMemberRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CIMGroupKickOutMemberRspDefaultTypeInternal() {}
  union {
    CIMGroupKickOutMemberRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CIMGroupKickOutMemberRspDefaultTypeInternal _CIMGroupKickOutMemberRsp_default_instance_;
constexpr CIMGroupMemberListReq::CIMGroupMemberListReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_id_(uint64_t{0u})
  , group_id_(uint64_t{0u}){}
struct CIMGroupMemberListReqDefaultTypeInternal {
  constexpr CIMGroupMemberListReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CIMGroupMemberListReqDefaultTypeInternal() {}
  union {
    CIMGroupMemberListReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CIMGroupMemberListReqDefaultTypeInternal _CIMGroupMemberListReq_default_instance_;
constexpr CIMGroupMemberListRsp::CIMGroupMemberListRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : member_id_list_()
  , _member_id_list_cached_byte_size_(0)
  , user_id_(uint64_t{0u})
  , group_id_(uint64_t{0u}){}
struct CIMGroupMemberListRspDefaultTypeInternal {
  constexpr CIMGroupMemberListRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CIMGroupMemberListRspDefaultTypeInternal() {}
  union {
    CIMGroupMemberListRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CIMGroupMemberListRspDefaultTypeInternal _CIMGroupMemberListRsp_default_instance_;
constexpr CIMGroupMemberChangedNotify::CIMGroupMemberChangedNotify(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : changed_list_()
  , user_id_(uint64_t{0u})
  , group_id_(uint64_t{0u}){}
struct CIMGroupMemberChangedNotifyDefaultTypeInternal {
  constexpr CIMGroupMemberChangedNotifyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CIMGroupMemberChangedNotifyDefaultTypeInternal() {}
  union {
    CIMGroupMemberChangedNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CIMGroupMemberChangedNotifyDefaultTypeInternal _CIMGroupMemberChangedNotify_default_instance_;
constexpr CIMGroupMemberChangedInfo::CIMGroupMemberChangedInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_id_(uint64_t{0u})
  , type_(0)
{}
struct CIMGroupMemberChangedInfoDefaultTypeInternal {
  constexpr CIMGroupMemberChangedInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CIMGroupMemberChangedInfoDefaultTypeInternal() {}
  union {
    CIMGroupMemberChangedInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CIMGroupMemberChangedInfoDefaultTypeInternal _CIMGroupMemberChangedInfo_default_instance_;
constexpr CIMGroupInfo::CIMGroupInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : group_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , group_intro_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , announcement_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , group_avatar_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , group_id_(uint64_t{0u})
  , group_type_(0)

  , join_model_(0)

  , be_invite_model_(0)

  , mute_model_(0)

  , group_owner_id_(uint64_t{0u})
  , create_time_(0u)
  , update_time_(0u){}
struct CIMGroupInfoDefaultTypeInternal {
  constexpr CIMGroupInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CIMGroupInfoDefaultTypeInternal() {}
  union {
    CIMGroupInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CIMGroupInfoDefaultTypeInternal _CIMGroupInfo_default_instance_;
constexpr CIMGroupVersionInfo::CIMGroupVersionInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : group_id_(uint64_t{0u})
  , group_version_(0u){}
struct CIMGroupVersionInfoDefaultTypeInternal {
  constexpr CIMGroupVersionInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CIMGroupVersionInfoDefaultTypeInternal() {}
  union {
    CIMGroupVersionInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CIMGroupVersionInfoDefaultTypeInternal _CIMGroupVersionInfo_default_instance_;
}  // namespace Group
}  // namespace CIM
namespace CIM {
namespace Group {
bool CIMGroupMemberChangedType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CIMGroupMemberChangedType_strings[3] = {};

static const char CIMGroupMemberChangedType_names[] =
  "kCIM_GROUP_MEMBER_CHANGED_TYPE_ADD"
  "kCIM_GROUP_MEMBER_CHANGED_TYPE_DEFAULT"
  "kCIM_GROUP_MEMBER_CHANGED_TYPE_DEL";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CIMGroupMemberChangedType_entries[] = {
  { {CIMGroupMemberChangedType_names + 0, 34}, 1 },
  { {CIMGroupMemberChangedType_names + 34, 38}, 0 },
  { {CIMGroupMemberChangedType_names + 72, 34}, 2 },
};

static const int CIMGroupMemberChangedType_entries_by_number[] = {
  1, // 0 -> kCIM_GROUP_MEMBER_CHANGED_TYPE_DEFAULT
  0, // 1 -> kCIM_GROUP_MEMBER_CHANGED_TYPE_ADD
  2, // 2 -> kCIM_GROUP_MEMBER_CHANGED_TYPE_DEL
};

const std::string& CIMGroupMemberChangedType_Name(
    CIMGroupMemberChangedType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CIMGroupMemberChangedType_entries,
          CIMGroupMemberChangedType_entries_by_number,
          3, CIMGroupMemberChangedType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CIMGroupMemberChangedType_entries,
      CIMGroupMemberChangedType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CIMGroupMemberChangedType_strings[idx].get();
}
bool CIMGroupMemberChangedType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CIMGroupMemberChangedType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CIMGroupMemberChangedType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<CIMGroupMemberChangedType>(int_value);
  }
  return success;
}
bool CIMGroupType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CIMGroupType_strings[3] = {};

static const char CIMGroupType_names[] =
  "kCIM_GROUP_TYPE_GROUP_NORMAL"
  "kCIM_GROUP_TYPE_GROUP_SUPER"
  "kCIM_GROUP_TYPE_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CIMGroupType_entries[] = {
  { {CIMGroupType_names + 0, 28}, 1 },
  { {CIMGroupType_names + 28, 27}, 2 },
  { {CIMGroupType_names + 55, 23}, 0 },
};

static const int CIMGroupType_entries_by_number[] = {
  2, // 0 -> kCIM_GROUP_TYPE_UNKNOWN
  0, // 1 -> kCIM_GROUP_TYPE_GROUP_NORMAL
  1, // 2 -> kCIM_GROUP_TYPE_GROUP_SUPER
};

const std::string& CIMGroupType_Name(
    CIMGroupType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CIMGroupType_entries,
          CIMGroupType_entries_by_number,
          3, CIMGroupType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CIMGroupType_entries,
      CIMGroupType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CIMGroupType_strings[idx].get();
}
bool CIMGroupType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CIMGroupType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CIMGroupType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<CIMGroupType>(int_value);
  }
  return success;
}
bool CIMGroupJoinModel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CIMGroupJoinModel_strings[3] = {};

static const char CIMGroupJoinModel_names[] =
  "kCIM_GROUP_JOIN_MODEL_DEFAULT"
  "kCIM_GROUP_JOIN_MODEL_NEED_AUTH"
  "kCIM_GROUP_JOIN_MODEL_REJECT";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CIMGroupJoinModel_entries[] = {
  { {CIMGroupJoinModel_names + 0, 29}, 0 },
  { {CIMGroupJoinModel_names + 29, 31}, 1 },
  { {CIMGroupJoinModel_names + 60, 28}, 2 },
};

static const int CIMGroupJoinModel_entries_by_number[] = {
  0, // 0 -> kCIM_GROUP_JOIN_MODEL_DEFAULT
  1, // 1 -> kCIM_GROUP_JOIN_MODEL_NEED_AUTH
  2, // 2 -> kCIM_GROUP_JOIN_MODEL_REJECT
};

const std::string& CIMGroupJoinModel_Name(
    CIMGroupJoinModel value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CIMGroupJoinModel_entries,
          CIMGroupJoinModel_entries_by_number,
          3, CIMGroupJoinModel_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CIMGroupJoinModel_entries,
      CIMGroupJoinModel_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CIMGroupJoinModel_strings[idx].get();
}
bool CIMGroupJoinModel_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CIMGroupJoinModel* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CIMGroupJoinModel_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<CIMGroupJoinModel>(int_value);
  }
  return success;
}
bool CIMGroupBeInviteMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CIMGroupBeInviteMode_strings[2] = {};

static const char CIMGroupBeInviteMode_names[] =
  "kCIM_GROUP_BE_INVITE_MODEL_DEFAULT"
  "kCIM_GROUP_BE_INVITE_MODEL_NEED_AGREE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CIMGroupBeInviteMode_entries[] = {
  { {CIMGroupBeInviteMode_names + 0, 34}, 0 },
  { {CIMGroupBeInviteMode_names + 34, 37}, 1 },
};

static const int CIMGroupBeInviteMode_entries_by_number[] = {
  0, // 0 -> kCIM_GROUP_BE_INVITE_MODEL_DEFAULT
  1, // 1 -> kCIM_GROUP_BE_INVITE_MODEL_NEED_AGREE
};

const std::string& CIMGroupBeInviteMode_Name(
    CIMGroupBeInviteMode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CIMGroupBeInviteMode_entries,
          CIMGroupBeInviteMode_entries_by_number,
          2, CIMGroupBeInviteMode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CIMGroupBeInviteMode_entries,
      CIMGroupBeInviteMode_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CIMGroupBeInviteMode_strings[idx].get();
}
bool CIMGroupBeInviteMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CIMGroupBeInviteMode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CIMGroupBeInviteMode_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<CIMGroupBeInviteMode>(int_value);
  }
  return success;
}
bool CIMGroupMuteModel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CIMGroupMuteModel_strings[2] = {};

static const char CIMGroupMuteModel_names[] =
  "kCIM_GROUP_MUTE_MODEL_ALL"
  "kCIM_GROUP_MUTE_MODEL_DEFAULT";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CIMGroupMuteModel_entries[] = {
  { {CIMGroupMuteModel_names + 0, 25}, 1 },
  { {CIMGroupMuteModel_names + 25, 29}, 0 },
};

static const int CIMGroupMuteModel_entries_by_number[] = {
  1, // 0 -> kCIM_GROUP_MUTE_MODEL_DEFAULT
  0, // 1 -> kCIM_GROUP_MUTE_MODEL_ALL
};

const std::string& CIMGroupMuteModel_Name(
    CIMGroupMuteModel value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CIMGroupMuteModel_entries,
          CIMGroupMuteModel_entries_by_number,
          2, CIMGroupMuteModel_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CIMGroupMuteModel_entries,
      CIMGroupMuteModel_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CIMGroupMuteModel_strings[idx].get();
}
bool CIMGroupMuteModel_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CIMGroupMuteModel* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CIMGroupMuteModel_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<CIMGroupMuteModel>(int_value);
  }
  return success;
}

// ===================================================================

class CIMGroupCreateReq::_Internal {
 public:
};

CIMGroupCreateReq::CIMGroupCreateReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  member_id_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CIM.Group.CIMGroupCreateReq)
}
CIMGroupCreateReq::CIMGroupCreateReq(const CIMGroupCreateReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      member_id_list_(from.member_id_list_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    group_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_group_name().empty()) {
    group_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_group_name(), 
      GetArenaForAllocation());
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:CIM.Group.CIMGroupCreateReq)
}

inline void CIMGroupCreateReq::SharedCtor() {
group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  group_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_id_ = uint64_t{0u};
}

CIMGroupCreateReq::~CIMGroupCreateReq() {
  // @@protoc_insertion_point(destructor:CIM.Group.CIMGroupCreateReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void CIMGroupCreateReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  group_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CIMGroupCreateReq::ArenaDtor(void* object) {
  CIMGroupCreateReq* _this = reinterpret_cast< CIMGroupCreateReq* >(object);
  (void)_this;
}
void CIMGroupCreateReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CIMGroupCreateReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CIMGroupCreateReq::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.Group.CIMGroupCreateReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  member_id_list_.Clear();
  group_name_.ClearToEmpty();
  user_id_ = uint64_t{0u};
  _internal_metadata_.Clear<std::string>();
}

const char* CIMGroupCreateReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string group_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_group_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 member_id_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_member_id_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_member_id_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CIMGroupCreateReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CIM.Group.CIMGroupCreateReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_id(), target);
  }

  // string group_name = 2;
  if (!this->_internal_group_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group_name().data(), static_cast<int>(this->_internal_group_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CIM.Group.CIMGroupCreateReq.group_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_group_name(), target);
  }

  // repeated uint64 member_id_list = 3;
  {
    int byte_size = _member_id_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          3, _internal_member_id_list(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CIM.Group.CIMGroupCreateReq)
  return target;
}

size_t CIMGroupCreateReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.Group.CIMGroupCreateReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 member_id_list = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->member_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _member_id_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string group_name = 2;
  if (!this->_internal_group_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group_name());
  }

  // uint64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CIMGroupCreateReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CIMGroupCreateReq*>(
      &from));
}

void CIMGroupCreateReq::MergeFrom(const CIMGroupCreateReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.Group.CIMGroupCreateReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  member_id_list_.MergeFrom(from.member_id_list_);
  if (!from._internal_group_name().empty()) {
    _internal_set_group_name(from._internal_group_name());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CIMGroupCreateReq::CopyFrom(const CIMGroupCreateReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.Group.CIMGroupCreateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIMGroupCreateReq::IsInitialized() const {
  return true;
}

void CIMGroupCreateReq::InternalSwap(CIMGroupCreateReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  member_id_list_.InternalSwap(&other->member_id_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &group_name_, lhs_arena,
      &other->group_name_, rhs_arena
  );
  swap(user_id_, other->user_id_);
}

std::string CIMGroupCreateReq::GetTypeName() const {
  return "CIM.Group.CIMGroupCreateReq";
}


// ===================================================================

class CIMGroupCreateRsp::_Internal {
 public:
  static const ::CIM::Group::CIMGroupInfo& group_info(const CIMGroupCreateRsp* msg);
};

const ::CIM::Group::CIMGroupInfo&
CIMGroupCreateRsp::_Internal::group_info(const CIMGroupCreateRsp* msg) {
  return *msg->group_info_;
}
CIMGroupCreateRsp::CIMGroupCreateRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  member_id_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CIM.Group.CIMGroupCreateRsp)
}
CIMGroupCreateRsp::CIMGroupCreateRsp(const CIMGroupCreateRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      member_id_list_(from.member_id_list_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  attach_notificatino_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    attach_notificatino_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_attach_notificatino_msg().empty()) {
    attach_notificatino_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_attach_notificatino_msg(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_group_info()) {
    group_info_ = new ::CIM::Group::CIMGroupInfo(*from.group_info_);
  } else {
    group_info_ = nullptr;
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_code_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(result_code_));
  // @@protoc_insertion_point(copy_constructor:CIM.Group.CIMGroupCreateRsp)
}

inline void CIMGroupCreateRsp::SharedCtor() {
attach_notificatino_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  attach_notificatino_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&group_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_code_) -
    reinterpret_cast<char*>(&group_info_)) + sizeof(result_code_));
}

CIMGroupCreateRsp::~CIMGroupCreateRsp() {
  // @@protoc_insertion_point(destructor:CIM.Group.CIMGroupCreateRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void CIMGroupCreateRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  attach_notificatino_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete group_info_;
}

void CIMGroupCreateRsp::ArenaDtor(void* object) {
  CIMGroupCreateRsp* _this = reinterpret_cast< CIMGroupCreateRsp* >(object);
  (void)_this;
}
void CIMGroupCreateRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CIMGroupCreateRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CIMGroupCreateRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.Group.CIMGroupCreateRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  member_id_list_.Clear();
  attach_notificatino_msg_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && group_info_ != nullptr) {
    delete group_info_;
  }
  group_info_ = nullptr;
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_code_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(result_code_));
  _internal_metadata_.Clear<std::string>();
}

const char* CIMGroupCreateRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 result_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          result_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CIM.Group.CIMGroupInfo group_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 member_id_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_member_id_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_member_id_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes attach_notificatino_msg = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_attach_notificatino_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CIMGroupCreateRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CIM.Group.CIMGroupCreateRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_id(), target);
  }

  // uint32 result_code = 2;
  if (this->_internal_result_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_result_code(), target);
  }

  // .CIM.Group.CIMGroupInfo group_info = 3;
  if (this->_internal_has_group_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::group_info(this), target, stream);
  }

  // repeated uint64 member_id_list = 4;
  {
    int byte_size = _member_id_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          4, _internal_member_id_list(), byte_size, target);
    }
  }

  // bytes attach_notificatino_msg = 10;
  if (!this->_internal_attach_notificatino_msg().empty()) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_attach_notificatino_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CIM.Group.CIMGroupCreateRsp)
  return target;
}

size_t CIMGroupCreateRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.Group.CIMGroupCreateRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 member_id_list = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->member_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _member_id_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes attach_notificatino_msg = 10;
  if (!this->_internal_attach_notificatino_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_notificatino_msg());
  }

  // .CIM.Group.CIMGroupInfo group_info = 3;
  if (this->_internal_has_group_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *group_info_);
  }

  // uint64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_user_id());
  }

  // uint32 result_code = 2;
  if (this->_internal_result_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_result_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CIMGroupCreateRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CIMGroupCreateRsp*>(
      &from));
}

void CIMGroupCreateRsp::MergeFrom(const CIMGroupCreateRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.Group.CIMGroupCreateRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  member_id_list_.MergeFrom(from.member_id_list_);
  if (!from._internal_attach_notificatino_msg().empty()) {
    _internal_set_attach_notificatino_msg(from._internal_attach_notificatino_msg());
  }
  if (from._internal_has_group_info()) {
    _internal_mutable_group_info()->::CIM::Group::CIMGroupInfo::MergeFrom(from._internal_group_info());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_result_code() != 0) {
    _internal_set_result_code(from._internal_result_code());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CIMGroupCreateRsp::CopyFrom(const CIMGroupCreateRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.Group.CIMGroupCreateRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIMGroupCreateRsp::IsInitialized() const {
  return true;
}

void CIMGroupCreateRsp::InternalSwap(CIMGroupCreateRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  member_id_list_.InternalSwap(&other->member_id_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &attach_notificatino_msg_, lhs_arena,
      &other->attach_notificatino_msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CIMGroupCreateRsp, result_code_)
      + sizeof(CIMGroupCreateRsp::result_code_)
      - PROTOBUF_FIELD_OFFSET(CIMGroupCreateRsp, group_info_)>(
          reinterpret_cast<char*>(&group_info_),
          reinterpret_cast<char*>(&other->group_info_));
}

std::string CIMGroupCreateRsp::GetTypeName() const {
  return "CIM.Group.CIMGroupCreateRsp";
}


// ===================================================================

class CIMGroupDisbandingReq::_Internal {
 public:
};

CIMGroupDisbandingReq::CIMGroupDisbandingReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CIM.Group.CIMGroupDisbandingReq)
}
CIMGroupDisbandingReq::CIMGroupDisbandingReq(const CIMGroupDisbandingReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&group_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(group_id_));
  // @@protoc_insertion_point(copy_constructor:CIM.Group.CIMGroupDisbandingReq)
}

inline void CIMGroupDisbandingReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&group_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(group_id_));
}

CIMGroupDisbandingReq::~CIMGroupDisbandingReq() {
  // @@protoc_insertion_point(destructor:CIM.Group.CIMGroupDisbandingReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void CIMGroupDisbandingReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CIMGroupDisbandingReq::ArenaDtor(void* object) {
  CIMGroupDisbandingReq* _this = reinterpret_cast< CIMGroupDisbandingReq* >(object);
  (void)_this;
}
void CIMGroupDisbandingReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CIMGroupDisbandingReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CIMGroupDisbandingReq::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.Group.CIMGroupDisbandingReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&group_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(group_id_));
  _internal_metadata_.Clear<std::string>();
}

const char* CIMGroupDisbandingReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CIMGroupDisbandingReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CIM.Group.CIMGroupDisbandingReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_id(), target);
  }

  // uint64 group_id = 2;
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_group_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CIM.Group.CIMGroupDisbandingReq)
  return target;
}

size_t CIMGroupDisbandingReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.Group.CIMGroupDisbandingReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_user_id());
  }

  // uint64 group_id = 2;
  if (this->_internal_group_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_group_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CIMGroupDisbandingReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CIMGroupDisbandingReq*>(
      &from));
}

void CIMGroupDisbandingReq::MergeFrom(const CIMGroupDisbandingReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.Group.CIMGroupDisbandingReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_group_id() != 0) {
    _internal_set_group_id(from._internal_group_id());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CIMGroupDisbandingReq::CopyFrom(const CIMGroupDisbandingReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.Group.CIMGroupDisbandingReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIMGroupDisbandingReq::IsInitialized() const {
  return true;
}

void CIMGroupDisbandingReq::InternalSwap(CIMGroupDisbandingReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CIMGroupDisbandingReq, group_id_)
      + sizeof(CIMGroupDisbandingReq::group_id_)
      - PROTOBUF_FIELD_OFFSET(CIMGroupDisbandingReq, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

std::string CIMGroupDisbandingReq::GetTypeName() const {
  return "CIM.Group.CIMGroupDisbandingReq";
}


// ===================================================================

class CIMGroupDisbandingRsp::_Internal {
 public:
};

CIMGroupDisbandingRsp::CIMGroupDisbandingRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CIM.Group.CIMGroupDisbandingRsp)
}
CIMGroupDisbandingRsp::CIMGroupDisbandingRsp(const CIMGroupDisbandingRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  attach_notificatino_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    attach_notificatino_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_attach_notificatino_msg().empty()) {
    attach_notificatino_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_attach_notificatino_msg(), 
      GetArenaForAllocation());
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_code_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(result_code_));
  // @@protoc_insertion_point(copy_constructor:CIM.Group.CIMGroupDisbandingRsp)
}

inline void CIMGroupDisbandingRsp::SharedCtor() {
attach_notificatino_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  attach_notificatino_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_code_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(result_code_));
}

CIMGroupDisbandingRsp::~CIMGroupDisbandingRsp() {
  // @@protoc_insertion_point(destructor:CIM.Group.CIMGroupDisbandingRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void CIMGroupDisbandingRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  attach_notificatino_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CIMGroupDisbandingRsp::ArenaDtor(void* object) {
  CIMGroupDisbandingRsp* _this = reinterpret_cast< CIMGroupDisbandingRsp* >(object);
  (void)_this;
}
void CIMGroupDisbandingRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CIMGroupDisbandingRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CIMGroupDisbandingRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.Group.CIMGroupDisbandingRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attach_notificatino_msg_.ClearToEmpty();
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_code_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(result_code_));
  _internal_metadata_.Clear<std::string>();
}

const char* CIMGroupDisbandingRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 result_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          result_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes attach_notificatino_msg = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_attach_notificatino_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CIMGroupDisbandingRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CIM.Group.CIMGroupDisbandingRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_id(), target);
  }

  // uint64 group_id = 2;
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_group_id(), target);
  }

  // uint32 result_code = 3;
  if (this->_internal_result_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_result_code(), target);
  }

  // bytes attach_notificatino_msg = 10;
  if (!this->_internal_attach_notificatino_msg().empty()) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_attach_notificatino_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CIM.Group.CIMGroupDisbandingRsp)
  return target;
}

size_t CIMGroupDisbandingRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.Group.CIMGroupDisbandingRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes attach_notificatino_msg = 10;
  if (!this->_internal_attach_notificatino_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_notificatino_msg());
  }

  // uint64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_user_id());
  }

  // uint64 group_id = 2;
  if (this->_internal_group_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_group_id());
  }

  // uint32 result_code = 3;
  if (this->_internal_result_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_result_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CIMGroupDisbandingRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CIMGroupDisbandingRsp*>(
      &from));
}

void CIMGroupDisbandingRsp::MergeFrom(const CIMGroupDisbandingRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.Group.CIMGroupDisbandingRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_attach_notificatino_msg().empty()) {
    _internal_set_attach_notificatino_msg(from._internal_attach_notificatino_msg());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_group_id() != 0) {
    _internal_set_group_id(from._internal_group_id());
  }
  if (from._internal_result_code() != 0) {
    _internal_set_result_code(from._internal_result_code());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CIMGroupDisbandingRsp::CopyFrom(const CIMGroupDisbandingRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.Group.CIMGroupDisbandingRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIMGroupDisbandingRsp::IsInitialized() const {
  return true;
}

void CIMGroupDisbandingRsp::InternalSwap(CIMGroupDisbandingRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &attach_notificatino_msg_, lhs_arena,
      &other->attach_notificatino_msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CIMGroupDisbandingRsp, result_code_)
      + sizeof(CIMGroupDisbandingRsp::result_code_)
      - PROTOBUF_FIELD_OFFSET(CIMGroupDisbandingRsp, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

std::string CIMGroupDisbandingRsp::GetTypeName() const {
  return "CIM.Group.CIMGroupDisbandingRsp";
}


// ===================================================================

class CIMGroupExitReq::_Internal {
 public:
};

CIMGroupExitReq::CIMGroupExitReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CIM.Group.CIMGroupExitReq)
}
CIMGroupExitReq::CIMGroupExitReq(const CIMGroupExitReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&group_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(group_id_));
  // @@protoc_insertion_point(copy_constructor:CIM.Group.CIMGroupExitReq)
}

inline void CIMGroupExitReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&group_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(group_id_));
}

CIMGroupExitReq::~CIMGroupExitReq() {
  // @@protoc_insertion_point(destructor:CIM.Group.CIMGroupExitReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void CIMGroupExitReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CIMGroupExitReq::ArenaDtor(void* object) {
  CIMGroupExitReq* _this = reinterpret_cast< CIMGroupExitReq* >(object);
  (void)_this;
}
void CIMGroupExitReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CIMGroupExitReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CIMGroupExitReq::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.Group.CIMGroupExitReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&group_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(group_id_));
  _internal_metadata_.Clear<std::string>();
}

const char* CIMGroupExitReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CIMGroupExitReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CIM.Group.CIMGroupExitReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_id(), target);
  }

  // uint64 group_id = 2;
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_group_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CIM.Group.CIMGroupExitReq)
  return target;
}

size_t CIMGroupExitReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.Group.CIMGroupExitReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_user_id());
  }

  // uint64 group_id = 2;
  if (this->_internal_group_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_group_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CIMGroupExitReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CIMGroupExitReq*>(
      &from));
}

void CIMGroupExitReq::MergeFrom(const CIMGroupExitReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.Group.CIMGroupExitReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_group_id() != 0) {
    _internal_set_group_id(from._internal_group_id());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CIMGroupExitReq::CopyFrom(const CIMGroupExitReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.Group.CIMGroupExitReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIMGroupExitReq::IsInitialized() const {
  return true;
}

void CIMGroupExitReq::InternalSwap(CIMGroupExitReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CIMGroupExitReq, group_id_)
      + sizeof(CIMGroupExitReq::group_id_)
      - PROTOBUF_FIELD_OFFSET(CIMGroupExitReq, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

std::string CIMGroupExitReq::GetTypeName() const {
  return "CIM.Group.CIMGroupExitReq";
}


// ===================================================================

class CIMGroupExitRsp::_Internal {
 public:
};

CIMGroupExitRsp::CIMGroupExitRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CIM.Group.CIMGroupExitRsp)
}
CIMGroupExitRsp::CIMGroupExitRsp(const CIMGroupExitRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  attach_notificatino_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    attach_notificatino_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_attach_notificatino_msg().empty()) {
    attach_notificatino_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_attach_notificatino_msg(), 
      GetArenaForAllocation());
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_code_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(result_code_));
  // @@protoc_insertion_point(copy_constructor:CIM.Group.CIMGroupExitRsp)
}

inline void CIMGroupExitRsp::SharedCtor() {
attach_notificatino_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  attach_notificatino_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_code_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(result_code_));
}

CIMGroupExitRsp::~CIMGroupExitRsp() {
  // @@protoc_insertion_point(destructor:CIM.Group.CIMGroupExitRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void CIMGroupExitRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  attach_notificatino_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CIMGroupExitRsp::ArenaDtor(void* object) {
  CIMGroupExitRsp* _this = reinterpret_cast< CIMGroupExitRsp* >(object);
  (void)_this;
}
void CIMGroupExitRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CIMGroupExitRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CIMGroupExitRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.Group.CIMGroupExitRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attach_notificatino_msg_.ClearToEmpty();
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_code_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(result_code_));
  _internal_metadata_.Clear<std::string>();
}

const char* CIMGroupExitRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 result_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          result_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes attach_notificatino_msg = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_attach_notificatino_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CIMGroupExitRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CIM.Group.CIMGroupExitRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_id(), target);
  }

  // uint64 group_id = 2;
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_group_id(), target);
  }

  // uint32 result_code = 3;
  if (this->_internal_result_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_result_code(), target);
  }

  // bytes attach_notificatino_msg = 10;
  if (!this->_internal_attach_notificatino_msg().empty()) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_attach_notificatino_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CIM.Group.CIMGroupExitRsp)
  return target;
}

size_t CIMGroupExitRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.Group.CIMGroupExitRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes attach_notificatino_msg = 10;
  if (!this->_internal_attach_notificatino_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_notificatino_msg());
  }

  // uint64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_user_id());
  }

  // uint64 group_id = 2;
  if (this->_internal_group_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_group_id());
  }

  // uint32 result_code = 3;
  if (this->_internal_result_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_result_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CIMGroupExitRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CIMGroupExitRsp*>(
      &from));
}

void CIMGroupExitRsp::MergeFrom(const CIMGroupExitRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.Group.CIMGroupExitRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_attach_notificatino_msg().empty()) {
    _internal_set_attach_notificatino_msg(from._internal_attach_notificatino_msg());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_group_id() != 0) {
    _internal_set_group_id(from._internal_group_id());
  }
  if (from._internal_result_code() != 0) {
    _internal_set_result_code(from._internal_result_code());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CIMGroupExitRsp::CopyFrom(const CIMGroupExitRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.Group.CIMGroupExitRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIMGroupExitRsp::IsInitialized() const {
  return true;
}

void CIMGroupExitRsp::InternalSwap(CIMGroupExitRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &attach_notificatino_msg_, lhs_arena,
      &other->attach_notificatino_msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CIMGroupExitRsp, result_code_)
      + sizeof(CIMGroupExitRsp::result_code_)
      - PROTOBUF_FIELD_OFFSET(CIMGroupExitRsp, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

std::string CIMGroupExitRsp::GetTypeName() const {
  return "CIM.Group.CIMGroupExitRsp";
}


// ===================================================================

class CIMGroupListReq::_Internal {
 public:
};

CIMGroupListReq::CIMGroupListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CIM.Group.CIMGroupListReq)
}
CIMGroupListReq::CIMGroupListReq(const CIMGroupListReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:CIM.Group.CIMGroupListReq)
}

inline void CIMGroupListReq::SharedCtor() {
user_id_ = uint64_t{0u};
}

CIMGroupListReq::~CIMGroupListReq() {
  // @@protoc_insertion_point(destructor:CIM.Group.CIMGroupListReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void CIMGroupListReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CIMGroupListReq::ArenaDtor(void* object) {
  CIMGroupListReq* _this = reinterpret_cast< CIMGroupListReq* >(object);
  (void)_this;
}
void CIMGroupListReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CIMGroupListReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CIMGroupListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.Group.CIMGroupListReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_ = uint64_t{0u};
  _internal_metadata_.Clear<std::string>();
}

const char* CIMGroupListReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CIMGroupListReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CIM.Group.CIMGroupListReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CIM.Group.CIMGroupListReq)
  return target;
}

size_t CIMGroupListReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.Group.CIMGroupListReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CIMGroupListReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CIMGroupListReq*>(
      &from));
}

void CIMGroupListReq::MergeFrom(const CIMGroupListReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.Group.CIMGroupListReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CIMGroupListReq::CopyFrom(const CIMGroupListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.Group.CIMGroupListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIMGroupListReq::IsInitialized() const {
  return true;
}

void CIMGroupListReq::InternalSwap(CIMGroupListReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(user_id_, other->user_id_);
}

std::string CIMGroupListReq::GetTypeName() const {
  return "CIM.Group.CIMGroupListReq";
}


// ===================================================================

class CIMGroupListRsp::_Internal {
 public:
};

CIMGroupListRsp::CIMGroupListRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  group_version_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CIM.Group.CIMGroupListRsp)
}
CIMGroupListRsp::CIMGroupListRsp(const CIMGroupListRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      group_version_list_(from.group_version_list_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:CIM.Group.CIMGroupListRsp)
}

inline void CIMGroupListRsp::SharedCtor() {
user_id_ = uint64_t{0u};
}

CIMGroupListRsp::~CIMGroupListRsp() {
  // @@protoc_insertion_point(destructor:CIM.Group.CIMGroupListRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void CIMGroupListRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CIMGroupListRsp::ArenaDtor(void* object) {
  CIMGroupListRsp* _this = reinterpret_cast< CIMGroupListRsp* >(object);
  (void)_this;
}
void CIMGroupListRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CIMGroupListRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CIMGroupListRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.Group.CIMGroupListRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_version_list_.Clear();
  user_id_ = uint64_t{0u};
  _internal_metadata_.Clear<std::string>();
}

const char* CIMGroupListRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CIM.Group.CIMGroupVersionInfo group_version_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_group_version_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CIMGroupListRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CIM.Group.CIMGroupListRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_id(), target);
  }

  // repeated .CIM.Group.CIMGroupVersionInfo group_version_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_group_version_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_group_version_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CIM.Group.CIMGroupListRsp)
  return target;
}

size_t CIMGroupListRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.Group.CIMGroupListRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CIM.Group.CIMGroupVersionInfo group_version_list = 2;
  total_size += 1UL * this->_internal_group_version_list_size();
  for (const auto& msg : this->group_version_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CIMGroupListRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CIMGroupListRsp*>(
      &from));
}

void CIMGroupListRsp::MergeFrom(const CIMGroupListRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.Group.CIMGroupListRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  group_version_list_.MergeFrom(from.group_version_list_);
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CIMGroupListRsp::CopyFrom(const CIMGroupListRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.Group.CIMGroupListRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIMGroupListRsp::IsInitialized() const {
  return true;
}

void CIMGroupListRsp::InternalSwap(CIMGroupListRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  group_version_list_.InternalSwap(&other->group_version_list_);
  swap(user_id_, other->user_id_);
}

std::string CIMGroupListRsp::GetTypeName() const {
  return "CIM.Group.CIMGroupListRsp";
}


// ===================================================================

class CIMGroupInfoReq::_Internal {
 public:
};

CIMGroupInfoReq::CIMGroupInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  group_version_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CIM.Group.CIMGroupInfoReq)
}
CIMGroupInfoReq::CIMGroupInfoReq(const CIMGroupInfoReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      group_version_list_(from.group_version_list_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:CIM.Group.CIMGroupInfoReq)
}

inline void CIMGroupInfoReq::SharedCtor() {
user_id_ = uint64_t{0u};
}

CIMGroupInfoReq::~CIMGroupInfoReq() {
  // @@protoc_insertion_point(destructor:CIM.Group.CIMGroupInfoReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void CIMGroupInfoReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CIMGroupInfoReq::ArenaDtor(void* object) {
  CIMGroupInfoReq* _this = reinterpret_cast< CIMGroupInfoReq* >(object);
  (void)_this;
}
void CIMGroupInfoReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CIMGroupInfoReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CIMGroupInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.Group.CIMGroupInfoReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_version_list_.Clear();
  user_id_ = uint64_t{0u};
  _internal_metadata_.Clear<std::string>();
}

const char* CIMGroupInfoReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CIM.Group.CIMGroupVersionInfo group_version_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_group_version_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CIMGroupInfoReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CIM.Group.CIMGroupInfoReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_id(), target);
  }

  // repeated .CIM.Group.CIMGroupVersionInfo group_version_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_group_version_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_group_version_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CIM.Group.CIMGroupInfoReq)
  return target;
}

size_t CIMGroupInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.Group.CIMGroupInfoReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CIM.Group.CIMGroupVersionInfo group_version_list = 2;
  total_size += 1UL * this->_internal_group_version_list_size();
  for (const auto& msg : this->group_version_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CIMGroupInfoReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CIMGroupInfoReq*>(
      &from));
}

void CIMGroupInfoReq::MergeFrom(const CIMGroupInfoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.Group.CIMGroupInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  group_version_list_.MergeFrom(from.group_version_list_);
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CIMGroupInfoReq::CopyFrom(const CIMGroupInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.Group.CIMGroupInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIMGroupInfoReq::IsInitialized() const {
  return true;
}

void CIMGroupInfoReq::InternalSwap(CIMGroupInfoReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  group_version_list_.InternalSwap(&other->group_version_list_);
  swap(user_id_, other->user_id_);
}

std::string CIMGroupInfoReq::GetTypeName() const {
  return "CIM.Group.CIMGroupInfoReq";
}


// ===================================================================

class CIMGroupInfoRsp::_Internal {
 public:
};

CIMGroupInfoRsp::CIMGroupInfoRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  group_info_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CIM.Group.CIMGroupInfoRsp)
}
CIMGroupInfoRsp::CIMGroupInfoRsp(const CIMGroupInfoRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      group_info_list_(from.group_info_list_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_code_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(result_code_));
  // @@protoc_insertion_point(copy_constructor:CIM.Group.CIMGroupInfoRsp)
}

inline void CIMGroupInfoRsp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_code_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(result_code_));
}

CIMGroupInfoRsp::~CIMGroupInfoRsp() {
  // @@protoc_insertion_point(destructor:CIM.Group.CIMGroupInfoRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void CIMGroupInfoRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CIMGroupInfoRsp::ArenaDtor(void* object) {
  CIMGroupInfoRsp* _this = reinterpret_cast< CIMGroupInfoRsp* >(object);
  (void)_this;
}
void CIMGroupInfoRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CIMGroupInfoRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CIMGroupInfoRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.Group.CIMGroupInfoRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_info_list_.Clear();
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_code_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(result_code_));
  _internal_metadata_.Clear<std::string>();
}

const char* CIMGroupInfoRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 result_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          result_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CIM.Group.CIMGroupInfo group_info_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_group_info_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CIMGroupInfoRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CIM.Group.CIMGroupInfoRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_id(), target);
  }

  // uint32 result_code = 2;
  if (this->_internal_result_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_result_code(), target);
  }

  // repeated .CIM.Group.CIMGroupInfo group_info_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_group_info_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_group_info_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CIM.Group.CIMGroupInfoRsp)
  return target;
}

size_t CIMGroupInfoRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.Group.CIMGroupInfoRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CIM.Group.CIMGroupInfo group_info_list = 3;
  total_size += 1UL * this->_internal_group_info_list_size();
  for (const auto& msg : this->group_info_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_user_id());
  }

  // uint32 result_code = 2;
  if (this->_internal_result_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_result_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CIMGroupInfoRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CIMGroupInfoRsp*>(
      &from));
}

void CIMGroupInfoRsp::MergeFrom(const CIMGroupInfoRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.Group.CIMGroupInfoRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  group_info_list_.MergeFrom(from.group_info_list_);
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_result_code() != 0) {
    _internal_set_result_code(from._internal_result_code());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CIMGroupInfoRsp::CopyFrom(const CIMGroupInfoRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.Group.CIMGroupInfoRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIMGroupInfoRsp::IsInitialized() const {
  return true;
}

void CIMGroupInfoRsp::InternalSwap(CIMGroupInfoRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  group_info_list_.InternalSwap(&other->group_info_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CIMGroupInfoRsp, result_code_)
      + sizeof(CIMGroupInfoRsp::result_code_)
      - PROTOBUF_FIELD_OFFSET(CIMGroupInfoRsp, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

std::string CIMGroupInfoRsp::GetTypeName() const {
  return "CIM.Group.CIMGroupInfoRsp";
}


// ===================================================================

class CIMGroupInviteMemberReq::_Internal {
 public:
};

CIMGroupInviteMemberReq::CIMGroupInviteMemberReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  member_id_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CIM.Group.CIMGroupInviteMemberReq)
}
CIMGroupInviteMemberReq::CIMGroupInviteMemberReq(const CIMGroupInviteMemberReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      member_id_list_(from.member_id_list_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&group_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(group_id_));
  // @@protoc_insertion_point(copy_constructor:CIM.Group.CIMGroupInviteMemberReq)
}

inline void CIMGroupInviteMemberReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&group_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(group_id_));
}

CIMGroupInviteMemberReq::~CIMGroupInviteMemberReq() {
  // @@protoc_insertion_point(destructor:CIM.Group.CIMGroupInviteMemberReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void CIMGroupInviteMemberReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CIMGroupInviteMemberReq::ArenaDtor(void* object) {
  CIMGroupInviteMemberReq* _this = reinterpret_cast< CIMGroupInviteMemberReq* >(object);
  (void)_this;
}
void CIMGroupInviteMemberReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CIMGroupInviteMemberReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CIMGroupInviteMemberReq::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.Group.CIMGroupInviteMemberReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  member_id_list_.Clear();
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&group_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(group_id_));
  _internal_metadata_.Clear<std::string>();
}

const char* CIMGroupInviteMemberReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 member_id_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_member_id_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_member_id_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CIMGroupInviteMemberReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CIM.Group.CIMGroupInviteMemberReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_id(), target);
  }

  // uint64 group_id = 2;
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_group_id(), target);
  }

  // repeated uint64 member_id_list = 3;
  {
    int byte_size = _member_id_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          3, _internal_member_id_list(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CIM.Group.CIMGroupInviteMemberReq)
  return target;
}

size_t CIMGroupInviteMemberReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.Group.CIMGroupInviteMemberReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 member_id_list = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->member_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _member_id_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_user_id());
  }

  // uint64 group_id = 2;
  if (this->_internal_group_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_group_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CIMGroupInviteMemberReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CIMGroupInviteMemberReq*>(
      &from));
}

void CIMGroupInviteMemberReq::MergeFrom(const CIMGroupInviteMemberReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.Group.CIMGroupInviteMemberReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  member_id_list_.MergeFrom(from.member_id_list_);
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_group_id() != 0) {
    _internal_set_group_id(from._internal_group_id());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CIMGroupInviteMemberReq::CopyFrom(const CIMGroupInviteMemberReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.Group.CIMGroupInviteMemberReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIMGroupInviteMemberReq::IsInitialized() const {
  return true;
}

void CIMGroupInviteMemberReq::InternalSwap(CIMGroupInviteMemberReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  member_id_list_.InternalSwap(&other->member_id_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CIMGroupInviteMemberReq, group_id_)
      + sizeof(CIMGroupInviteMemberReq::group_id_)
      - PROTOBUF_FIELD_OFFSET(CIMGroupInviteMemberReq, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

std::string CIMGroupInviteMemberReq::GetTypeName() const {
  return "CIM.Group.CIMGroupInviteMemberReq";
}


// ===================================================================

class CIMGroupInviteMemberRsp::_Internal {
 public:
};

CIMGroupInviteMemberRsp::CIMGroupInviteMemberRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CIM.Group.CIMGroupInviteMemberRsp)
}
CIMGroupInviteMemberRsp::CIMGroupInviteMemberRsp(const CIMGroupInviteMemberRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  attach_notificatino_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    attach_notificatino_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_attach_notificatino_msg().empty()) {
    attach_notificatino_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_attach_notificatino_msg(), 
      GetArenaForAllocation());
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_code_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(result_code_));
  // @@protoc_insertion_point(copy_constructor:CIM.Group.CIMGroupInviteMemberRsp)
}

inline void CIMGroupInviteMemberRsp::SharedCtor() {
attach_notificatino_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  attach_notificatino_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_code_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(result_code_));
}

CIMGroupInviteMemberRsp::~CIMGroupInviteMemberRsp() {
  // @@protoc_insertion_point(destructor:CIM.Group.CIMGroupInviteMemberRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void CIMGroupInviteMemberRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  attach_notificatino_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CIMGroupInviteMemberRsp::ArenaDtor(void* object) {
  CIMGroupInviteMemberRsp* _this = reinterpret_cast< CIMGroupInviteMemberRsp* >(object);
  (void)_this;
}
void CIMGroupInviteMemberRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CIMGroupInviteMemberRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CIMGroupInviteMemberRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.Group.CIMGroupInviteMemberRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attach_notificatino_msg_.ClearToEmpty();
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_code_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(result_code_));
  _internal_metadata_.Clear<std::string>();
}

const char* CIMGroupInviteMemberRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 result_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          result_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes attach_notificatino_msg = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_attach_notificatino_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CIMGroupInviteMemberRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CIM.Group.CIMGroupInviteMemberRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_id(), target);
  }

  // uint64 group_id = 2;
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_group_id(), target);
  }

  // uint32 result_code = 3;
  if (this->_internal_result_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_result_code(), target);
  }

  // bytes attach_notificatino_msg = 10;
  if (!this->_internal_attach_notificatino_msg().empty()) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_attach_notificatino_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CIM.Group.CIMGroupInviteMemberRsp)
  return target;
}

size_t CIMGroupInviteMemberRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.Group.CIMGroupInviteMemberRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes attach_notificatino_msg = 10;
  if (!this->_internal_attach_notificatino_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_notificatino_msg());
  }

  // uint64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_user_id());
  }

  // uint64 group_id = 2;
  if (this->_internal_group_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_group_id());
  }

  // uint32 result_code = 3;
  if (this->_internal_result_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_result_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CIMGroupInviteMemberRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CIMGroupInviteMemberRsp*>(
      &from));
}

void CIMGroupInviteMemberRsp::MergeFrom(const CIMGroupInviteMemberRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.Group.CIMGroupInviteMemberRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_attach_notificatino_msg().empty()) {
    _internal_set_attach_notificatino_msg(from._internal_attach_notificatino_msg());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_group_id() != 0) {
    _internal_set_group_id(from._internal_group_id());
  }
  if (from._internal_result_code() != 0) {
    _internal_set_result_code(from._internal_result_code());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CIMGroupInviteMemberRsp::CopyFrom(const CIMGroupInviteMemberRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.Group.CIMGroupInviteMemberRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIMGroupInviteMemberRsp::IsInitialized() const {
  return true;
}

void CIMGroupInviteMemberRsp::InternalSwap(CIMGroupInviteMemberRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &attach_notificatino_msg_, lhs_arena,
      &other->attach_notificatino_msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CIMGroupInviteMemberRsp, result_code_)
      + sizeof(CIMGroupInviteMemberRsp::result_code_)
      - PROTOBUF_FIELD_OFFSET(CIMGroupInviteMemberRsp, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

std::string CIMGroupInviteMemberRsp::GetTypeName() const {
  return "CIM.Group.CIMGroupInviteMemberRsp";
}


// ===================================================================

class CIMGroupKickOutMemberReq::_Internal {
 public:
};

CIMGroupKickOutMemberReq::CIMGroupKickOutMemberReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  member_id_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CIM.Group.CIMGroupKickOutMemberReq)
}
CIMGroupKickOutMemberReq::CIMGroupKickOutMemberReq(const CIMGroupKickOutMemberReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      member_id_list_(from.member_id_list_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&group_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(group_id_));
  // @@protoc_insertion_point(copy_constructor:CIM.Group.CIMGroupKickOutMemberReq)
}

inline void CIMGroupKickOutMemberReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&group_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(group_id_));
}

CIMGroupKickOutMemberReq::~CIMGroupKickOutMemberReq() {
  // @@protoc_insertion_point(destructor:CIM.Group.CIMGroupKickOutMemberReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void CIMGroupKickOutMemberReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CIMGroupKickOutMemberReq::ArenaDtor(void* object) {
  CIMGroupKickOutMemberReq* _this = reinterpret_cast< CIMGroupKickOutMemberReq* >(object);
  (void)_this;
}
void CIMGroupKickOutMemberReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CIMGroupKickOutMemberReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CIMGroupKickOutMemberReq::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.Group.CIMGroupKickOutMemberReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  member_id_list_.Clear();
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&group_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(group_id_));
  _internal_metadata_.Clear<std::string>();
}

const char* CIMGroupKickOutMemberReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 member_id_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_member_id_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_member_id_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CIMGroupKickOutMemberReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CIM.Group.CIMGroupKickOutMemberReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_id(), target);
  }

  // uint64 group_id = 2;
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_group_id(), target);
  }

  // repeated uint64 member_id_list = 3;
  {
    int byte_size = _member_id_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          3, _internal_member_id_list(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CIM.Group.CIMGroupKickOutMemberReq)
  return target;
}

size_t CIMGroupKickOutMemberReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.Group.CIMGroupKickOutMemberReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 member_id_list = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->member_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _member_id_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_user_id());
  }

  // uint64 group_id = 2;
  if (this->_internal_group_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_group_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CIMGroupKickOutMemberReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CIMGroupKickOutMemberReq*>(
      &from));
}

void CIMGroupKickOutMemberReq::MergeFrom(const CIMGroupKickOutMemberReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.Group.CIMGroupKickOutMemberReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  member_id_list_.MergeFrom(from.member_id_list_);
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_group_id() != 0) {
    _internal_set_group_id(from._internal_group_id());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CIMGroupKickOutMemberReq::CopyFrom(const CIMGroupKickOutMemberReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.Group.CIMGroupKickOutMemberReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIMGroupKickOutMemberReq::IsInitialized() const {
  return true;
}

void CIMGroupKickOutMemberReq::InternalSwap(CIMGroupKickOutMemberReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  member_id_list_.InternalSwap(&other->member_id_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CIMGroupKickOutMemberReq, group_id_)
      + sizeof(CIMGroupKickOutMemberReq::group_id_)
      - PROTOBUF_FIELD_OFFSET(CIMGroupKickOutMemberReq, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

std::string CIMGroupKickOutMemberReq::GetTypeName() const {
  return "CIM.Group.CIMGroupKickOutMemberReq";
}


// ===================================================================

class CIMGroupKickOutMemberRsp::_Internal {
 public:
};

CIMGroupKickOutMemberRsp::CIMGroupKickOutMemberRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CIM.Group.CIMGroupKickOutMemberRsp)
}
CIMGroupKickOutMemberRsp::CIMGroupKickOutMemberRsp(const CIMGroupKickOutMemberRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  attach_notificatino_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    attach_notificatino_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_attach_notificatino_msg().empty()) {
    attach_notificatino_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_attach_notificatino_msg(), 
      GetArenaForAllocation());
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_code_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(result_code_));
  // @@protoc_insertion_point(copy_constructor:CIM.Group.CIMGroupKickOutMemberRsp)
}

inline void CIMGroupKickOutMemberRsp::SharedCtor() {
attach_notificatino_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  attach_notificatino_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_code_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(result_code_));
}

CIMGroupKickOutMemberRsp::~CIMGroupKickOutMemberRsp() {
  // @@protoc_insertion_point(destructor:CIM.Group.CIMGroupKickOutMemberRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void CIMGroupKickOutMemberRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  attach_notificatino_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CIMGroupKickOutMemberRsp::ArenaDtor(void* object) {
  CIMGroupKickOutMemberRsp* _this = reinterpret_cast< CIMGroupKickOutMemberRsp* >(object);
  (void)_this;
}
void CIMGroupKickOutMemberRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CIMGroupKickOutMemberRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CIMGroupKickOutMemberRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.Group.CIMGroupKickOutMemberRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attach_notificatino_msg_.ClearToEmpty();
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_code_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(result_code_));
  _internal_metadata_.Clear<std::string>();
}

const char* CIMGroupKickOutMemberRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 result_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          result_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes attach_notificatino_msg = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_attach_notificatino_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CIMGroupKickOutMemberRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CIM.Group.CIMGroupKickOutMemberRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_id(), target);
  }

  // uint64 group_id = 2;
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_group_id(), target);
  }

  // uint32 result_code = 3;
  if (this->_internal_result_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_result_code(), target);
  }

  // bytes attach_notificatino_msg = 10;
  if (!this->_internal_attach_notificatino_msg().empty()) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_attach_notificatino_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CIM.Group.CIMGroupKickOutMemberRsp)
  return target;
}

size_t CIMGroupKickOutMemberRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.Group.CIMGroupKickOutMemberRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes attach_notificatino_msg = 10;
  if (!this->_internal_attach_notificatino_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_notificatino_msg());
  }

  // uint64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_user_id());
  }

  // uint64 group_id = 2;
  if (this->_internal_group_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_group_id());
  }

  // uint32 result_code = 3;
  if (this->_internal_result_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_result_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CIMGroupKickOutMemberRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CIMGroupKickOutMemberRsp*>(
      &from));
}

void CIMGroupKickOutMemberRsp::MergeFrom(const CIMGroupKickOutMemberRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.Group.CIMGroupKickOutMemberRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_attach_notificatino_msg().empty()) {
    _internal_set_attach_notificatino_msg(from._internal_attach_notificatino_msg());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_group_id() != 0) {
    _internal_set_group_id(from._internal_group_id());
  }
  if (from._internal_result_code() != 0) {
    _internal_set_result_code(from._internal_result_code());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CIMGroupKickOutMemberRsp::CopyFrom(const CIMGroupKickOutMemberRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.Group.CIMGroupKickOutMemberRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIMGroupKickOutMemberRsp::IsInitialized() const {
  return true;
}

void CIMGroupKickOutMemberRsp::InternalSwap(CIMGroupKickOutMemberRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &attach_notificatino_msg_, lhs_arena,
      &other->attach_notificatino_msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CIMGroupKickOutMemberRsp, result_code_)
      + sizeof(CIMGroupKickOutMemberRsp::result_code_)
      - PROTOBUF_FIELD_OFFSET(CIMGroupKickOutMemberRsp, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

std::string CIMGroupKickOutMemberRsp::GetTypeName() const {
  return "CIM.Group.CIMGroupKickOutMemberRsp";
}


// ===================================================================

class CIMGroupMemberListReq::_Internal {
 public:
};

CIMGroupMemberListReq::CIMGroupMemberListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CIM.Group.CIMGroupMemberListReq)
}
CIMGroupMemberListReq::CIMGroupMemberListReq(const CIMGroupMemberListReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&group_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(group_id_));
  // @@protoc_insertion_point(copy_constructor:CIM.Group.CIMGroupMemberListReq)
}

inline void CIMGroupMemberListReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&group_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(group_id_));
}

CIMGroupMemberListReq::~CIMGroupMemberListReq() {
  // @@protoc_insertion_point(destructor:CIM.Group.CIMGroupMemberListReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void CIMGroupMemberListReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CIMGroupMemberListReq::ArenaDtor(void* object) {
  CIMGroupMemberListReq* _this = reinterpret_cast< CIMGroupMemberListReq* >(object);
  (void)_this;
}
void CIMGroupMemberListReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CIMGroupMemberListReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CIMGroupMemberListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.Group.CIMGroupMemberListReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&group_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(group_id_));
  _internal_metadata_.Clear<std::string>();
}

const char* CIMGroupMemberListReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CIMGroupMemberListReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CIM.Group.CIMGroupMemberListReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_id(), target);
  }

  // uint64 group_id = 2;
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_group_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CIM.Group.CIMGroupMemberListReq)
  return target;
}

size_t CIMGroupMemberListReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.Group.CIMGroupMemberListReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_user_id());
  }

  // uint64 group_id = 2;
  if (this->_internal_group_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_group_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CIMGroupMemberListReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CIMGroupMemberListReq*>(
      &from));
}

void CIMGroupMemberListReq::MergeFrom(const CIMGroupMemberListReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.Group.CIMGroupMemberListReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_group_id() != 0) {
    _internal_set_group_id(from._internal_group_id());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CIMGroupMemberListReq::CopyFrom(const CIMGroupMemberListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.Group.CIMGroupMemberListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIMGroupMemberListReq::IsInitialized() const {
  return true;
}

void CIMGroupMemberListReq::InternalSwap(CIMGroupMemberListReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CIMGroupMemberListReq, group_id_)
      + sizeof(CIMGroupMemberListReq::group_id_)
      - PROTOBUF_FIELD_OFFSET(CIMGroupMemberListReq, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

std::string CIMGroupMemberListReq::GetTypeName() const {
  return "CIM.Group.CIMGroupMemberListReq";
}


// ===================================================================

class CIMGroupMemberListRsp::_Internal {
 public:
};

CIMGroupMemberListRsp::CIMGroupMemberListRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  member_id_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CIM.Group.CIMGroupMemberListRsp)
}
CIMGroupMemberListRsp::CIMGroupMemberListRsp(const CIMGroupMemberListRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      member_id_list_(from.member_id_list_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&group_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(group_id_));
  // @@protoc_insertion_point(copy_constructor:CIM.Group.CIMGroupMemberListRsp)
}

inline void CIMGroupMemberListRsp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&group_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(group_id_));
}

CIMGroupMemberListRsp::~CIMGroupMemberListRsp() {
  // @@protoc_insertion_point(destructor:CIM.Group.CIMGroupMemberListRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void CIMGroupMemberListRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CIMGroupMemberListRsp::ArenaDtor(void* object) {
  CIMGroupMemberListRsp* _this = reinterpret_cast< CIMGroupMemberListRsp* >(object);
  (void)_this;
}
void CIMGroupMemberListRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CIMGroupMemberListRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CIMGroupMemberListRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.Group.CIMGroupMemberListRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  member_id_list_.Clear();
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&group_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(group_id_));
  _internal_metadata_.Clear<std::string>();
}

const char* CIMGroupMemberListRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 member_id_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_member_id_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_member_id_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CIMGroupMemberListRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CIM.Group.CIMGroupMemberListRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_id(), target);
  }

  // uint64 group_id = 2;
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_group_id(), target);
  }

  // repeated uint64 member_id_list = 3;
  {
    int byte_size = _member_id_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          3, _internal_member_id_list(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CIM.Group.CIMGroupMemberListRsp)
  return target;
}

size_t CIMGroupMemberListRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.Group.CIMGroupMemberListRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 member_id_list = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->member_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _member_id_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_user_id());
  }

  // uint64 group_id = 2;
  if (this->_internal_group_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_group_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CIMGroupMemberListRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CIMGroupMemberListRsp*>(
      &from));
}

void CIMGroupMemberListRsp::MergeFrom(const CIMGroupMemberListRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.Group.CIMGroupMemberListRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  member_id_list_.MergeFrom(from.member_id_list_);
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_group_id() != 0) {
    _internal_set_group_id(from._internal_group_id());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CIMGroupMemberListRsp::CopyFrom(const CIMGroupMemberListRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.Group.CIMGroupMemberListRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIMGroupMemberListRsp::IsInitialized() const {
  return true;
}

void CIMGroupMemberListRsp::InternalSwap(CIMGroupMemberListRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  member_id_list_.InternalSwap(&other->member_id_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CIMGroupMemberListRsp, group_id_)
      + sizeof(CIMGroupMemberListRsp::group_id_)
      - PROTOBUF_FIELD_OFFSET(CIMGroupMemberListRsp, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

std::string CIMGroupMemberListRsp::GetTypeName() const {
  return "CIM.Group.CIMGroupMemberListRsp";
}


// ===================================================================

class CIMGroupMemberChangedNotify::_Internal {
 public:
};

CIMGroupMemberChangedNotify::CIMGroupMemberChangedNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  changed_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CIM.Group.CIMGroupMemberChangedNotify)
}
CIMGroupMemberChangedNotify::CIMGroupMemberChangedNotify(const CIMGroupMemberChangedNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      changed_list_(from.changed_list_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&group_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(group_id_));
  // @@protoc_insertion_point(copy_constructor:CIM.Group.CIMGroupMemberChangedNotify)
}

inline void CIMGroupMemberChangedNotify::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&group_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(group_id_));
}

CIMGroupMemberChangedNotify::~CIMGroupMemberChangedNotify() {
  // @@protoc_insertion_point(destructor:CIM.Group.CIMGroupMemberChangedNotify)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void CIMGroupMemberChangedNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CIMGroupMemberChangedNotify::ArenaDtor(void* object) {
  CIMGroupMemberChangedNotify* _this = reinterpret_cast< CIMGroupMemberChangedNotify* >(object);
  (void)_this;
}
void CIMGroupMemberChangedNotify::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CIMGroupMemberChangedNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CIMGroupMemberChangedNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.Group.CIMGroupMemberChangedNotify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  changed_list_.Clear();
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&group_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(group_id_));
  _internal_metadata_.Clear<std::string>();
}

const char* CIMGroupMemberChangedNotify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CIM.Group.CIMGroupMemberChangedInfo changed_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_changed_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CIMGroupMemberChangedNotify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CIM.Group.CIMGroupMemberChangedNotify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_id(), target);
  }

  // uint64 group_id = 2;
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_group_id(), target);
  }

  // repeated .CIM.Group.CIMGroupMemberChangedInfo changed_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_changed_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_changed_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CIM.Group.CIMGroupMemberChangedNotify)
  return target;
}

size_t CIMGroupMemberChangedNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.Group.CIMGroupMemberChangedNotify)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CIM.Group.CIMGroupMemberChangedInfo changed_list = 3;
  total_size += 1UL * this->_internal_changed_list_size();
  for (const auto& msg : this->changed_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_user_id());
  }

  // uint64 group_id = 2;
  if (this->_internal_group_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_group_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CIMGroupMemberChangedNotify::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CIMGroupMemberChangedNotify*>(
      &from));
}

void CIMGroupMemberChangedNotify::MergeFrom(const CIMGroupMemberChangedNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.Group.CIMGroupMemberChangedNotify)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  changed_list_.MergeFrom(from.changed_list_);
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_group_id() != 0) {
    _internal_set_group_id(from._internal_group_id());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CIMGroupMemberChangedNotify::CopyFrom(const CIMGroupMemberChangedNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.Group.CIMGroupMemberChangedNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIMGroupMemberChangedNotify::IsInitialized() const {
  return true;
}

void CIMGroupMemberChangedNotify::InternalSwap(CIMGroupMemberChangedNotify* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  changed_list_.InternalSwap(&other->changed_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CIMGroupMemberChangedNotify, group_id_)
      + sizeof(CIMGroupMemberChangedNotify::group_id_)
      - PROTOBUF_FIELD_OFFSET(CIMGroupMemberChangedNotify, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

std::string CIMGroupMemberChangedNotify::GetTypeName() const {
  return "CIM.Group.CIMGroupMemberChangedNotify";
}


// ===================================================================

class CIMGroupMemberChangedInfo::_Internal {
 public:
};

CIMGroupMemberChangedInfo::CIMGroupMemberChangedInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CIM.Group.CIMGroupMemberChangedInfo)
}
CIMGroupMemberChangedInfo::CIMGroupMemberChangedInfo(const CIMGroupMemberChangedInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:CIM.Group.CIMGroupMemberChangedInfo)
}

inline void CIMGroupMemberChangedInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(type_));
}

CIMGroupMemberChangedInfo::~CIMGroupMemberChangedInfo() {
  // @@protoc_insertion_point(destructor:CIM.Group.CIMGroupMemberChangedInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void CIMGroupMemberChangedInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CIMGroupMemberChangedInfo::ArenaDtor(void* object) {
  CIMGroupMemberChangedInfo* _this = reinterpret_cast< CIMGroupMemberChangedInfo* >(object);
  (void)_this;
}
void CIMGroupMemberChangedInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CIMGroupMemberChangedInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CIMGroupMemberChangedInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.Group.CIMGroupMemberChangedInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(type_));
  _internal_metadata_.Clear<std::string>();
}

const char* CIMGroupMemberChangedInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CIM.Group.CIMGroupMemberChangedType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::CIM::Group::CIMGroupMemberChangedType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CIMGroupMemberChangedInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CIM.Group.CIMGroupMemberChangedInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_id(), target);
  }

  // .CIM.Group.CIMGroupMemberChangedType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CIM.Group.CIMGroupMemberChangedInfo)
  return target;
}

size_t CIMGroupMemberChangedInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.Group.CIMGroupMemberChangedInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_user_id());
  }

  // .CIM.Group.CIMGroupMemberChangedType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CIMGroupMemberChangedInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CIMGroupMemberChangedInfo*>(
      &from));
}

void CIMGroupMemberChangedInfo::MergeFrom(const CIMGroupMemberChangedInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.Group.CIMGroupMemberChangedInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CIMGroupMemberChangedInfo::CopyFrom(const CIMGroupMemberChangedInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.Group.CIMGroupMemberChangedInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIMGroupMemberChangedInfo::IsInitialized() const {
  return true;
}

void CIMGroupMemberChangedInfo::InternalSwap(CIMGroupMemberChangedInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CIMGroupMemberChangedInfo, type_)
      + sizeof(CIMGroupMemberChangedInfo::type_)
      - PROTOBUF_FIELD_OFFSET(CIMGroupMemberChangedInfo, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

std::string CIMGroupMemberChangedInfo::GetTypeName() const {
  return "CIM.Group.CIMGroupMemberChangedInfo";
}


// ===================================================================

class CIMGroupInfo::_Internal {
 public:
};

CIMGroupInfo::CIMGroupInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CIM.Group.CIMGroupInfo)
}
CIMGroupInfo::CIMGroupInfo(const CIMGroupInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    group_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_group_name().empty()) {
    group_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_group_name(), 
      GetArenaForAllocation());
  }
  group_intro_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    group_intro_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_group_intro().empty()) {
    group_intro_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_group_intro(), 
      GetArenaForAllocation());
  }
  announcement_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    announcement_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_announcement().empty()) {
    announcement_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_announcement(), 
      GetArenaForAllocation());
  }
  group_avatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    group_avatar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_group_avatar().empty()) {
    group_avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_group_avatar(), 
      GetArenaForAllocation());
  }
  ::memcpy(&group_id_, &from.group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&update_time_) -
    reinterpret_cast<char*>(&group_id_)) + sizeof(update_time_));
  // @@protoc_insertion_point(copy_constructor:CIM.Group.CIMGroupInfo)
}

inline void CIMGroupInfo::SharedCtor() {
group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  group_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
group_intro_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  group_intro_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
announcement_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  announcement_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
group_avatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  group_avatar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&group_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&update_time_) -
    reinterpret_cast<char*>(&group_id_)) + sizeof(update_time_));
}

CIMGroupInfo::~CIMGroupInfo() {
  // @@protoc_insertion_point(destructor:CIM.Group.CIMGroupInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void CIMGroupInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  group_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  group_intro_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  announcement_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  group_avatar_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CIMGroupInfo::ArenaDtor(void* object) {
  CIMGroupInfo* _this = reinterpret_cast< CIMGroupInfo* >(object);
  (void)_this;
}
void CIMGroupInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CIMGroupInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CIMGroupInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.Group.CIMGroupInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_name_.ClearToEmpty();
  group_intro_.ClearToEmpty();
  announcement_.ClearToEmpty();
  group_avatar_.ClearToEmpty();
  ::memset(&group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_time_) -
      reinterpret_cast<char*>(&group_id_)) + sizeof(update_time_));
  _internal_metadata_.Clear<std::string>();
}

const char* CIMGroupInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string group_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_group_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CIM.Group.CIMGroupType group_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_group_type(static_cast<::CIM::Group::CIMGroupType>(val));
        } else
          goto handle_unusual;
        continue;
      // .CIM.Group.CIMGroupJoinModel join_model = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_join_model(static_cast<::CIM::Group::CIMGroupJoinModel>(val));
        } else
          goto handle_unusual;
        continue;
      // .CIM.Group.CIMGroupBeInviteMode be_invite_model = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_be_invite_model(static_cast<::CIM::Group::CIMGroupBeInviteMode>(val));
        } else
          goto handle_unusual;
        continue;
      // .CIM.Group.CIMGroupMuteModel mute_model = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mute_model(static_cast<::CIM::Group::CIMGroupMuteModel>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 group_owner_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          group_owner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 create_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          create_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 update_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          update_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string group_intro = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_group_intro();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string announcement = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_announcement();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string group_avatar = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_group_avatar();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CIMGroupInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CIM.Group.CIMGroupInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 group_id = 1;
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_group_id(), target);
  }

  // string group_name = 2;
  if (!this->_internal_group_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group_name().data(), static_cast<int>(this->_internal_group_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CIM.Group.CIMGroupInfo.group_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_group_name(), target);
  }

  // .CIM.Group.CIMGroupType group_type = 3;
  if (this->_internal_group_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_group_type(), target);
  }

  // .CIM.Group.CIMGroupJoinModel join_model = 4;
  if (this->_internal_join_model() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_join_model(), target);
  }

  // .CIM.Group.CIMGroupBeInviteMode be_invite_model = 5;
  if (this->_internal_be_invite_model() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_be_invite_model(), target);
  }

  // .CIM.Group.CIMGroupMuteModel mute_model = 6;
  if (this->_internal_mute_model() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_mute_model(), target);
  }

  // uint64 group_owner_id = 7;
  if (this->_internal_group_owner_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_group_owner_id(), target);
  }

  // uint32 create_time = 8;
  if (this->_internal_create_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_create_time(), target);
  }

  // uint32 update_time = 9;
  if (this->_internal_update_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_update_time(), target);
  }

  // string group_intro = 10;
  if (!this->_internal_group_intro().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group_intro().data(), static_cast<int>(this->_internal_group_intro().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CIM.Group.CIMGroupInfo.group_intro");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_group_intro(), target);
  }

  // string announcement = 11;
  if (!this->_internal_announcement().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_announcement().data(), static_cast<int>(this->_internal_announcement().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CIM.Group.CIMGroupInfo.announcement");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_announcement(), target);
  }

  // string group_avatar = 12;
  if (!this->_internal_group_avatar().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group_avatar().data(), static_cast<int>(this->_internal_group_avatar().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CIM.Group.CIMGroupInfo.group_avatar");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_group_avatar(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CIM.Group.CIMGroupInfo)
  return target;
}

size_t CIMGroupInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.Group.CIMGroupInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string group_name = 2;
  if (!this->_internal_group_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group_name());
  }

  // string group_intro = 10;
  if (!this->_internal_group_intro().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group_intro());
  }

  // string announcement = 11;
  if (!this->_internal_announcement().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_announcement());
  }

  // string group_avatar = 12;
  if (!this->_internal_group_avatar().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group_avatar());
  }

  // uint64 group_id = 1;
  if (this->_internal_group_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_group_id());
  }

  // .CIM.Group.CIMGroupType group_type = 3;
  if (this->_internal_group_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_group_type());
  }

  // .CIM.Group.CIMGroupJoinModel join_model = 4;
  if (this->_internal_join_model() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_join_model());
  }

  // .CIM.Group.CIMGroupBeInviteMode be_invite_model = 5;
  if (this->_internal_be_invite_model() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_be_invite_model());
  }

  // .CIM.Group.CIMGroupMuteModel mute_model = 6;
  if (this->_internal_mute_model() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mute_model());
  }

  // uint64 group_owner_id = 7;
  if (this->_internal_group_owner_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_group_owner_id());
  }

  // uint32 create_time = 8;
  if (this->_internal_create_time() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_create_time());
  }

  // uint32 update_time = 9;
  if (this->_internal_update_time() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_update_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CIMGroupInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CIMGroupInfo*>(
      &from));
}

void CIMGroupInfo::MergeFrom(const CIMGroupInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.Group.CIMGroupInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_group_name().empty()) {
    _internal_set_group_name(from._internal_group_name());
  }
  if (!from._internal_group_intro().empty()) {
    _internal_set_group_intro(from._internal_group_intro());
  }
  if (!from._internal_announcement().empty()) {
    _internal_set_announcement(from._internal_announcement());
  }
  if (!from._internal_group_avatar().empty()) {
    _internal_set_group_avatar(from._internal_group_avatar());
  }
  if (from._internal_group_id() != 0) {
    _internal_set_group_id(from._internal_group_id());
  }
  if (from._internal_group_type() != 0) {
    _internal_set_group_type(from._internal_group_type());
  }
  if (from._internal_join_model() != 0) {
    _internal_set_join_model(from._internal_join_model());
  }
  if (from._internal_be_invite_model() != 0) {
    _internal_set_be_invite_model(from._internal_be_invite_model());
  }
  if (from._internal_mute_model() != 0) {
    _internal_set_mute_model(from._internal_mute_model());
  }
  if (from._internal_group_owner_id() != 0) {
    _internal_set_group_owner_id(from._internal_group_owner_id());
  }
  if (from._internal_create_time() != 0) {
    _internal_set_create_time(from._internal_create_time());
  }
  if (from._internal_update_time() != 0) {
    _internal_set_update_time(from._internal_update_time());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CIMGroupInfo::CopyFrom(const CIMGroupInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.Group.CIMGroupInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIMGroupInfo::IsInitialized() const {
  return true;
}

void CIMGroupInfo::InternalSwap(CIMGroupInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &group_name_, lhs_arena,
      &other->group_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &group_intro_, lhs_arena,
      &other->group_intro_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &announcement_, lhs_arena,
      &other->announcement_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &group_avatar_, lhs_arena,
      &other->group_avatar_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CIMGroupInfo, update_time_)
      + sizeof(CIMGroupInfo::update_time_)
      - PROTOBUF_FIELD_OFFSET(CIMGroupInfo, group_id_)>(
          reinterpret_cast<char*>(&group_id_),
          reinterpret_cast<char*>(&other->group_id_));
}

std::string CIMGroupInfo::GetTypeName() const {
  return "CIM.Group.CIMGroupInfo";
}


// ===================================================================

class CIMGroupVersionInfo::_Internal {
 public:
};

CIMGroupVersionInfo::CIMGroupVersionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CIM.Group.CIMGroupVersionInfo)
}
CIMGroupVersionInfo::CIMGroupVersionInfo(const CIMGroupVersionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&group_id_, &from.group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&group_version_) -
    reinterpret_cast<char*>(&group_id_)) + sizeof(group_version_));
  // @@protoc_insertion_point(copy_constructor:CIM.Group.CIMGroupVersionInfo)
}

inline void CIMGroupVersionInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&group_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&group_version_) -
    reinterpret_cast<char*>(&group_id_)) + sizeof(group_version_));
}

CIMGroupVersionInfo::~CIMGroupVersionInfo() {
  // @@protoc_insertion_point(destructor:CIM.Group.CIMGroupVersionInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void CIMGroupVersionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CIMGroupVersionInfo::ArenaDtor(void* object) {
  CIMGroupVersionInfo* _this = reinterpret_cast< CIMGroupVersionInfo* >(object);
  (void)_this;
}
void CIMGroupVersionInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CIMGroupVersionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CIMGroupVersionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CIM.Group.CIMGroupVersionInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&group_version_) -
      reinterpret_cast<char*>(&group_id_)) + sizeof(group_version_));
  _internal_metadata_.Clear<std::string>();
}

const char* CIMGroupVersionInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 group_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          group_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CIMGroupVersionInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CIM.Group.CIMGroupVersionInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 group_id = 1;
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_group_id(), target);
  }

  // uint32 group_version = 2;
  if (this->_internal_group_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_group_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CIM.Group.CIMGroupVersionInfo)
  return target;
}

size_t CIMGroupVersionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIM.Group.CIMGroupVersionInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 group_id = 1;
  if (this->_internal_group_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_group_id());
  }

  // uint32 group_version = 2;
  if (this->_internal_group_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_group_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CIMGroupVersionInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CIMGroupVersionInfo*>(
      &from));
}

void CIMGroupVersionInfo::MergeFrom(const CIMGroupVersionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIM.Group.CIMGroupVersionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_group_id() != 0) {
    _internal_set_group_id(from._internal_group_id());
  }
  if (from._internal_group_version() != 0) {
    _internal_set_group_version(from._internal_group_version());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CIMGroupVersionInfo::CopyFrom(const CIMGroupVersionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIM.Group.CIMGroupVersionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIMGroupVersionInfo::IsInitialized() const {
  return true;
}

void CIMGroupVersionInfo::InternalSwap(CIMGroupVersionInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CIMGroupVersionInfo, group_version_)
      + sizeof(CIMGroupVersionInfo::group_version_)
      - PROTOBUF_FIELD_OFFSET(CIMGroupVersionInfo, group_id_)>(
          reinterpret_cast<char*>(&group_id_),
          reinterpret_cast<char*>(&other->group_id_));
}

std::string CIMGroupVersionInfo::GetTypeName() const {
  return "CIM.Group.CIMGroupVersionInfo";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Group
}  // namespace CIM
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CIM::Group::CIMGroupCreateReq* Arena::CreateMaybeMessage< ::CIM::Group::CIMGroupCreateReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CIM::Group::CIMGroupCreateReq >(arena);
}
template<> PROTOBUF_NOINLINE ::CIM::Group::CIMGroupCreateRsp* Arena::CreateMaybeMessage< ::CIM::Group::CIMGroupCreateRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CIM::Group::CIMGroupCreateRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::CIM::Group::CIMGroupDisbandingReq* Arena::CreateMaybeMessage< ::CIM::Group::CIMGroupDisbandingReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CIM::Group::CIMGroupDisbandingReq >(arena);
}
template<> PROTOBUF_NOINLINE ::CIM::Group::CIMGroupDisbandingRsp* Arena::CreateMaybeMessage< ::CIM::Group::CIMGroupDisbandingRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CIM::Group::CIMGroupDisbandingRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::CIM::Group::CIMGroupExitReq* Arena::CreateMaybeMessage< ::CIM::Group::CIMGroupExitReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CIM::Group::CIMGroupExitReq >(arena);
}
template<> PROTOBUF_NOINLINE ::CIM::Group::CIMGroupExitRsp* Arena::CreateMaybeMessage< ::CIM::Group::CIMGroupExitRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CIM::Group::CIMGroupExitRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::CIM::Group::CIMGroupListReq* Arena::CreateMaybeMessage< ::CIM::Group::CIMGroupListReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CIM::Group::CIMGroupListReq >(arena);
}
template<> PROTOBUF_NOINLINE ::CIM::Group::CIMGroupListRsp* Arena::CreateMaybeMessage< ::CIM::Group::CIMGroupListRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CIM::Group::CIMGroupListRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::CIM::Group::CIMGroupInfoReq* Arena::CreateMaybeMessage< ::CIM::Group::CIMGroupInfoReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CIM::Group::CIMGroupInfoReq >(arena);
}
template<> PROTOBUF_NOINLINE ::CIM::Group::CIMGroupInfoRsp* Arena::CreateMaybeMessage< ::CIM::Group::CIMGroupInfoRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CIM::Group::CIMGroupInfoRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::CIM::Group::CIMGroupInviteMemberReq* Arena::CreateMaybeMessage< ::CIM::Group::CIMGroupInviteMemberReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CIM::Group::CIMGroupInviteMemberReq >(arena);
}
template<> PROTOBUF_NOINLINE ::CIM::Group::CIMGroupInviteMemberRsp* Arena::CreateMaybeMessage< ::CIM::Group::CIMGroupInviteMemberRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CIM::Group::CIMGroupInviteMemberRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::CIM::Group::CIMGroupKickOutMemberReq* Arena::CreateMaybeMessage< ::CIM::Group::CIMGroupKickOutMemberReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CIM::Group::CIMGroupKickOutMemberReq >(arena);
}
template<> PROTOBUF_NOINLINE ::CIM::Group::CIMGroupKickOutMemberRsp* Arena::CreateMaybeMessage< ::CIM::Group::CIMGroupKickOutMemberRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CIM::Group::CIMGroupKickOutMemberRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::CIM::Group::CIMGroupMemberListReq* Arena::CreateMaybeMessage< ::CIM::Group::CIMGroupMemberListReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CIM::Group::CIMGroupMemberListReq >(arena);
}
template<> PROTOBUF_NOINLINE ::CIM::Group::CIMGroupMemberListRsp* Arena::CreateMaybeMessage< ::CIM::Group::CIMGroupMemberListRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CIM::Group::CIMGroupMemberListRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::CIM::Group::CIMGroupMemberChangedNotify* Arena::CreateMaybeMessage< ::CIM::Group::CIMGroupMemberChangedNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CIM::Group::CIMGroupMemberChangedNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::CIM::Group::CIMGroupMemberChangedInfo* Arena::CreateMaybeMessage< ::CIM::Group::CIMGroupMemberChangedInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CIM::Group::CIMGroupMemberChangedInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CIM::Group::CIMGroupInfo* Arena::CreateMaybeMessage< ::CIM::Group::CIMGroupInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CIM::Group::CIMGroupInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CIM::Group::CIMGroupVersionInfo* Arena::CreateMaybeMessage< ::CIM::Group::CIMGroupVersionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CIM::Group::CIMGroupVersionInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
